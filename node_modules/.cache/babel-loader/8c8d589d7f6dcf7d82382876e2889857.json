{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for RetryHandlerOptions\r\n */\nexport class RetryHandlerOptions {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * To create an instance of RetryHandlerOptions\r\n   * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\r\n   * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\r\n   * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\r\n   * @returns An instance of RetryHandlerOptions\r\n   */\n  constructor(delay = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY) {\n    if (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(\"Delay and MaxRetries should not be more than \".concat(RetryHandlerOptions.MAX_DELAY, \" and \").concat(RetryHandlerOptions.MAX_MAX_RETRIES));\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (delay > RetryHandlerOptions.MAX_DELAY) {\n      const error = new Error(\"Delay should not be more than \".concat(RetryHandlerOptions.MAX_DELAY));\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(\"MaxRetries should not be more than \".concat(RetryHandlerOptions.MAX_MAX_RETRIES));\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    }\n\n    this.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);\n    this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);\n    this.shouldRetry = shouldRetry;\n  }\n  /**\r\n   * @public\r\n   * To get the maximum delay\r\n   * @returns A maximum delay\r\n   */\n\n\n  getMaxDelay() {\n    return RetryHandlerOptions.MAX_DELAY;\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * A member holding default delay value in seconds\r\n */\n\nRetryHandlerOptions.DEFAULT_DELAY = 3;\n/**\r\n * @private\r\n * @static\r\n * A member holding default maxRetries value\r\n */\n\nRetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum delay value in seconds\r\n */\n\nRetryHandlerOptions.MAX_DELAY = 180;\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum maxRetries value\r\n */\n\nRetryHandlerOptions.MAX_MAX_RETRIES = 10;\n/**\r\n * @private\r\n * A member holding default shouldRetry callback\r\n */\n\nRetryHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;","map":null,"metadata":{},"sourceType":"module"}