{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\r\n * @module TelemetryHandler\r\n */\n\n\nimport { PACKAGE_VERSION } from \"../Constants\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { generateUUID, getRequestHeader, setRequestHeader } from \"./MiddlewareUtil\";\nimport { TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for TelemetryHandler\r\n */\n\nexport class TelemetryHandler {\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The context object of the request\r\n   * @returns A Promise that resolves to nothing\r\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let clientRequestId = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);\n\n        if (clientRequestId === null) {\n          clientRequestId = generateUUID();\n          setRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);\n        }\n\n        let sdkVersionValue = \"\".concat(TelemetryHandler.PRODUCT_NAME, \"/\").concat(PACKAGE_VERSION);\n        let options;\n\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions.name);\n        }\n\n        if (typeof options !== \"undefined\") {\n          const featureUsage = options.getFeatureUsage();\n          sdkVersionValue += \" (\".concat(TelemetryHandler.FEATURE_USAGE_STRING, \"=\").concat(featureUsage, \")\");\n        }\n\n        setRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);\n        return yield this.nextMiddleware.execute(context);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * To set the next middleware in the chain\r\n   * @param {Middleware} next - The middleware instance\r\n   * @returns Nothing\r\n   */\n\n\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the client request id header\r\n */\n\nTelemetryHandler.CLIENT_REQUEST_ID_HEADER = \"client-request-id\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the sdk version header\r\n */\n\nTelemetryHandler.SDK_VERSION_HEADER = \"SdkVersion\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the language prefix for the sdk version header value\r\n */\n\nTelemetryHandler.PRODUCT_NAME = \"graph-js\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the key for the feature usage metrics\r\n */\n\nTelemetryHandler.FEATURE_USAGE_STRING = \"featureUsage\";","map":null,"metadata":{},"sourceType":"module"}