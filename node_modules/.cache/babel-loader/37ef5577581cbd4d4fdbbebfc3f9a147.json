{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/start-project/src/components/FetchData.js\";\nimport React, { Component } from 'react';\nexport class FetchData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecasts: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return React.createElement(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Temp. (C)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Temp. (F)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Summary\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, forecasts.map(forecast => React.createElement(\"tr\", {\n      key: forecast.date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, forecast.date), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, forecast.temperatureC), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, forecast.temperatureF), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, forecast.summary)))));\n  }\n\n  render() {\n    let contents = this.state.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Loading...\")) : FetchData.renderForecastsTable(this.state.forecasts);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"tabelLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Weather forecast\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"This component demonstrates fetching data from the server.\"), contents);\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('weatherforecast');\n    const data = await response.json();\n    this.setState({\n      forecasts: data,\n      loading: false\n    });\n  }\n\n}\nFetchData.displayName = FetchData.name;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/start-project/src/components/FetchData.js"],"names":["React","Component","FetchData","constructor","props","state","forecasts","loading","componentDidMount","populateWeatherData","renderForecastsTable","map","forecast","date","temperatureC","temperatureF","summary","render","contents","response","fetch","data","json","setState","displayName","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAGvCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,mBAAL;AACD;;AAED,SAAOC,oBAAP,CAA4BJ,SAA5B,EAAuC;AACrC,WACE;AAAO,MAAA,SAAS,EAAC,qBAAjB;AAAuC,yBAAgB,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,SAAS,CAACK,GAAV,CAAcC,QAAQ,IACrB;AAAI,MAAA,GAAG,EAAEA,QAAQ,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,QAAQ,CAACC,IAAd,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,QAAQ,CAACE,YAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,QAAQ,CAACG,YAAd,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,QAAQ,CAACI,OAAd,CAJF,CADD,CADH,CATF,CADF;AAsBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,QAAQ,GAAG,KAAKb,KAAL,CAAWE,OAAX,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,CADW,GAEXL,SAAS,CAACQ,oBAAV,CAA+B,KAAKL,KAAL,CAAWC,SAA1C,CAFJ;AAIA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAFF,EAGGY,QAHH,CADF;AAOD;;AAED,QAAMT,mBAAN,GAA4B;AAC1B,UAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAKC,QAAL,CAAc;AAAEjB,MAAAA,SAAS,EAAEe,IAAb;AAAmBd,MAAAA,OAAO,EAAE;AAA5B,KAAd;AACD;;AAvDsC;AAA5BL,S,CACJsB,W,GAActB,SAAS,CAACuB,I","sourcesContent":["import React, { Component } from 'react';\n\nexport class FetchData extends Component {\n  static displayName = FetchData.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('weatherforecast');\n    const data = await response.json();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}