{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @class\r\n * Class representing MiddlewareControl\r\n */\nexport class MiddlewareControl {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of MiddlewareControl\r\n   * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions\r\n   * @returns The instance of MiddlewareControl\r\n   */\n  constructor(middlewareOptions = []) {\n    this.middlewareOptions = new Map();\n\n    for (const option of middlewareOptions) {\n      const name = option.constructor.name;\n      this.middlewareOptions.set(name, option);\n    }\n  }\n  /**\r\n   * @public\r\n   * To get the middleware option using the class name of the option\r\n   * @param {string} name - The class name of the strongly typed option class\r\n   * @returns The middleware option\r\n   */\n\n\n  getMiddlewareOptions(name) {\n    return this.middlewareOptions.get(name);\n  }\n  /**\r\n   * @public\r\n   * To set the middleware options using the class name of the option\r\n   * @param {string} name - The class name of the strongly typed option class\r\n   * @param {MiddlewareOptions} option - The strongly typed middleware option\r\n   * @returns nothing\r\n   */\n\n\n  setMiddlewareOptions(name, option) {\n    this.middlewareOptions.set(name, option);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}