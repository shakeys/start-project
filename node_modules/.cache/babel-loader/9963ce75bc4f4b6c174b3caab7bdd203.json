{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { ClientConfigurationErrorMessage } from \"./error/ClientConfigurationError\";\nimport { XhrClient } from \"./XHRClient\";\nimport { UrlUtils } from \"./utils/UrlUtils\";\n/**\r\n * @hidden\r\n */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n  AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\n})(AuthorityType || (AuthorityType = {}));\n/**\r\n * @hidden\r\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n  }\n\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function () {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.tenantDiscoveryResponse) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this.canonicalAuthority;\n    },\n    set: function (url) {\n      this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function () {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n     */\n    get: function () {\n      return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Given a string, validate that it is of the form https://domain/path\r\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ClientConfigurationErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /**\r\n   * Calls the OIDC endpoint and returns the response\r\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\n    var client = new XhrClient();\n    return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\",\n    /*enableCaching: */\n    true).then(function (response) {\n      return {\n        AuthorizationEndpoint: response.authorization_endpoint,\n        EndSessionEndpoint: response.end_session_endpoint,\n        Issuer: response.issuer\n      };\n    });\n  };\n  /**\r\n   * Returns a promise.\r\n   * Checks to see if the authority is in the cache\r\n   * Discover endpoints via openid-configuration\r\n   * If successful, caches the endpoint for later use in OIDC\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    var _this = this;\n\n    var openIdConfigurationEndpoint = \"\";\n    return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {\n      openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;\n      return _this.DiscoverEndpoints(openIdConfigurationEndpoint);\n    }).then(function (tenantDiscoveryResponse) {\n      _this.tenantDiscoveryResponse = tenantDiscoveryResponse;\n      return _this;\n    });\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":null,"metadata":{},"sourceType":"module"}