{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet() {}\n  /**\r\n  * Check if there are dup scopes in a given request\r\n  *\r\n  * @param cachedScopes\r\n  * @param scopes\r\n  */\n  // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n\n\n  ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n\n    for (var i = 0; i < scopes.length; i++) {\n      if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Check if a given scope is present in the request\r\n   *\r\n   * @param cachedScopes\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.containsScope = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n    return scopes.every(function (value) {\n      return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0;\n    });\n  };\n  /**\r\n   * toLower\r\n   *\r\n   * @param scopes\r\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.convertToLowerCase = function (scopes) {\n    return scopes.map(function (scope) {\n      return scope.toLowerCase();\n    });\n  };\n  /**\r\n   * remove one element from a scope array\r\n   *\r\n   * @param scopes\r\n   * @param scope\r\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.removeElement = function (scopes, scope) {\n    return scopes.filter(function (value) {\n      return value !== scope;\n    });\n  };\n  /**\r\n   * Parse the scopes into a formatted scopeList\r\n   * @param scopes\r\n   */\n\n\n  ScopeSet.parseScope = function (scopes) {\n    var scopeList = \"\";\n\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n\n    return scopeList;\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":null,"metadata":{},"sourceType":"module"}