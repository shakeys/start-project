{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport { AccessTokenKey } from \"./AccessTokenKey\";\nimport { AccessTokenValue } from \"./AccessTokenValue\";\nimport { ServerRequestParameters } from \"./ServerRequestParameters\";\nimport { ClientInfo } from \"./ClientInfo\";\nimport { Constants, libraryVersion } from \"./utils/Constants\";\nimport { IdToken } from \"./IdToken\";\nimport { Storage } from \"./Storage\";\nimport { Account } from \"./Account\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { StringUtils } from \"./utils/StringUtils\";\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { TokenUtils } from \"./utils/TokenUtils\";\nimport { TimeUtils } from \"./utils/TimeUtils\";\nimport { UrlUtils } from \"./utils/UrlUtils\";\nimport { ResponseUtils } from \"./utils/ResponseUtils\";\nimport { AuthorityFactory } from \"./AuthorityFactory\";\nimport { buildConfiguration } from \"./Configuration\";\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\nimport { AuthError } from \"./error/AuthError\";\nimport { ClientAuthError, ClientAuthErrorMessage } from \"./error/ClientAuthError\";\nimport { ServerError } from \"./error/ServerError\";\nimport { InteractionRequiredAuthError } from \"./error/InteractionRequiredAuthError\";\nimport { buildResponseStateOnly } from \"./AuthResponse\";\nimport TelemetryManager from \"./telemetry/TelemetryManager\"; // default authority\n\nvar DEFAULT_AUTHORITY = \"https://login.microsoftonline.com/common\";\n/**\r\n * @hidden\r\n * @ignore\r\n * response_type from OpenIDConnect\r\n * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1\r\n * Since we support only implicit flow in this library, we restrict the response_type support to only 'token' and 'id_token'\r\n *\r\n */\n\nvar ResponseTypes = {\n  id_token: \"id_token\",\n  token: \"token\",\n  id_token_token: \"id_token token\"\n};\n/**\r\n * @hidden\r\n * @ignore\r\n * A wrapper to handle the token response/error within the iFrame always\r\n *\r\n * @param target\r\n * @param propertyKey\r\n * @param descriptor\r\n */\n\nvar resolveTokenOnlyIfOutOfIframe = function (target, propertyKey, descriptor) {\n  var tokenAcquisitionMethod = descriptor.value;\n\n  descriptor.value = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return this.isInIframe() ? new Promise(function () {\n      return;\n    }) : tokenAcquisitionMethod.apply(this, args);\n  };\n\n  return descriptor;\n};\n/**\r\n * UserAgentApplication class\r\n *\r\n * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions\r\n */\n\n\nvar UserAgentApplication =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application.\r\n   * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   *\r\n   * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/\r\n       * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance\r\n   */\n  function UserAgentApplication(configuration) {\n    // callbacks for token/error\n    this.authResponseCallback = null;\n    this.tokenReceivedCallback = null;\n    this.errorReceivedCallback = null; // Set the Configuration\n\n    this.config = buildConfiguration(configuration); // Set the callback boolean\n\n    this.redirectCallbacksSet = false;\n    this.logger = this.config.system.logger;\n    this.clientId = this.config.auth.clientId;\n    this.inCookie = this.config.cache.storeAuthStateInCookie;\n    this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId); // if no authority is passed, set the default: \"https://login.microsoftonline.com/common\"\n\n    this.authority = this.config.auth.authority || DEFAULT_AUTHORITY; // track login and acquireToken in progress\n\n    this.loginInProgress = false;\n    this.acquireTokenInProgress = false; // cache keys msal - typescript throws an error if any value other than \"localStorage\" or \"sessionStorage\" is passed\n\n    try {\n      this.cacheStorage = new Storage(this.config.cache.cacheLocation);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidCacheLocationConfigError(this.config.cache.cacheLocation);\n    } // Initialize window handling code\n\n\n    window.openedWindows = [];\n    window.activeRenewals = {};\n    window.renewStates = [];\n    window.callbackMappedToRenewStates = {};\n    window.promiseMappedToRenewStates = {};\n    window.msal = this;\n    var urlHash = window.location.hash;\n    var urlContainsHash = this.urlContainsHash(urlHash); // On the server 302 - Redirect, handle this\n\n    if (!this.config.framework.isAngular) {\n      if (urlContainsHash) {\n        this.handleAuthenticationResponse(urlHash);\n      }\n    }\n  }\n\n  Object.defineProperty(UserAgentApplication.prototype, \"authority\", {\n    /**\r\n     * Method to manage the authority URL.\r\n     *\r\n     * @returns {string} authority\r\n     */\n    get: function () {\n      return this.authorityInstance.CanonicalAuthority;\n    },\n\n    /**\r\n     * setter for the authority URL\r\n     * @param {string} authority\r\n     */\n    // If the developer passes an authority, create an instance\n    set: function (val) {\n      this.authorityInstance = AuthorityFactory.CreateInstance(val, this.config.auth.validateAuthority);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Get the current authority instance from the MSAL configuration object\r\n   *\r\n   * @returns {@link Authority} authority instance\r\n   */\n\n  UserAgentApplication.prototype.getAuthorityInstance = function () {\n    return this.authorityInstance;\n  };\n\n  UserAgentApplication.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {\n    if (!authOrTokenCallback) {\n      this.redirectCallbacksSet = false;\n      throw ClientConfigurationError.createInvalidCallbackObjectError(authOrTokenCallback);\n    } // Set callbacks\n\n\n    if (errorReceivedCallback) {\n      this.tokenReceivedCallback = authOrTokenCallback;\n      this.errorReceivedCallback = errorReceivedCallback;\n      this.logger.warning(\"This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).\");\n    } else {\n      this.authResponseCallback = authOrTokenCallback;\n    }\n\n    this.redirectCallbacksSet = true; // On the server 302 - Redirect, handle this\n\n    if (!this.config.framework.isAngular) {\n      var cachedHash = this.cacheStorage.getItem(Constants.urlHash);\n\n      if (cachedHash) {\n        this.processCallBack(cachedHash, null);\n      }\n    }\n  };\n\n  UserAgentApplication.prototype.authResponseHandler = function (interactionType, response, resolve) {\n    if (interactionType === Constants.interactionTypeRedirect) {\n      if (this.errorReceivedCallback) {\n        this.tokenReceivedCallback(response);\n      } else if (this.authResponseCallback) {\n        this.authResponseCallback(null, response);\n      }\n    } else if (interactionType === Constants.interactionTypePopup) {\n      resolve(response);\n    } else {\n      throw ClientAuthError.createInvalidInteractionTypeError();\n    }\n  };\n\n  UserAgentApplication.prototype.authErrorHandler = function (interactionType, authErr, response, reject) {\n    if (interactionType === Constants.interactionTypeRedirect) {\n      if (this.errorReceivedCallback) {\n        this.errorReceivedCallback(authErr, response.accountState);\n      } else {\n        this.authResponseCallback(authErr, response);\n      }\n    } else if (interactionType === Constants.interactionTypePopup) {\n      reject(authErr);\n    } else {\n      throw ClientAuthError.createInvalidInteractionTypeError();\n    }\n  }; //#endregion\n\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint.\r\n   * @param {@link (AuthenticationParameters:type)}\r\n   */\n\n\n  UserAgentApplication.prototype.loginRedirect = function (request) {\n    // Throw error if callbacks are not set before redirect\n    if (!this.redirectCallbacksSet) {\n      throw ClientConfigurationError.createRedirectCallbacksNotSetError();\n    }\n\n    this.acquireTokenInteractive(Constants.interactionTypeRedirect, true, request);\n  };\n  /**\r\n   * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint.\r\n   * @param {@link (AuthenticationParameters:type)}\r\n   *\r\n   * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n   */\n\n\n  UserAgentApplication.prototype.acquireTokenRedirect = function (request) {\n    if (!request) {\n      throw ClientConfigurationError.createEmptyRequestError();\n    } // Throw error if callbacks are not set before redirect\n\n\n    if (!this.redirectCallbacksSet) {\n      throw ClientConfigurationError.createRedirectCallbacksNotSetError();\n    }\n\n    this.acquireTokenInteractive(Constants.interactionTypeRedirect, false, request);\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param {@link (AuthenticationParameters:type)}\r\n   *\r\n   * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  UserAgentApplication.prototype.loginPopup = function (request) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.acquireTokenInteractive(Constants.interactionTypePopup, true, request, resolve, reject);\n    });\n  };\n  /**\r\n   * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n   * @param {@link AuthenticationParameters}\r\n   *\r\n   * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n   * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  UserAgentApplication.prototype.acquireTokenPopup = function (request) {\n    var _this = this;\n\n    if (!request) {\n      throw ClientConfigurationError.createEmptyRequestError();\n    }\n\n    return new Promise(function (resolve, reject) {\n      _this.acquireTokenInteractive(Constants.interactionTypePopup, false, request, resolve, reject);\n    });\n  }; //#region Acquire Token\n\n  /**\r\n   * Use when initiating the login process or when you want to obtain an access_token for your API,\r\n   * either by redirecting the user's browser window to the authorization endpoint or via opening a popup window in the user's browser.\r\n   * @param {@link (AuthenticationParameters:type)}\r\n   *\r\n   * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n   */\n\n\n  UserAgentApplication.prototype.acquireTokenInteractive = function (interactionType, isLoginCall, request, resolve, reject) {\n    var _this = this; // If already in progress, do not proceed\n\n\n    if (this.loginInProgress || this.acquireTokenInProgress) {\n      var thrownError = this.loginInProgress ? ClientAuthError.createLoginInProgressError() : ClientAuthError.createAcquireTokenInProgressError();\n      var stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request && request.state));\n      this.authErrorHandler(interactionType, thrownError, stateOnlyResponse, reject);\n      return;\n    } // if extraScopesToConsent is passed in loginCall, append them to the login request\n\n\n    var scopes = isLoginCall ? this.appendScopes(request) : request.scopes; // Validate and filter scopes (the validate function will throw if validation fails)\n\n    this.validateInputScope(scopes, !isLoginCall); // Get the account object if a session exists\n\n    var account = request && request.account && !isLoginCall ? request.account : this.getAccount(); // If no session exists, prompt the user to login.\n\n    if (!account && !ServerRequestParameters.isSSOParam(request)) {\n      if (isLoginCall) {\n        // extract ADAL id_token if exists\n        var adalIdToken = this.extractADALIdToken(); // silent login if ADAL id_token is retrieved successfully - SSO\n\n        if (adalIdToken && !scopes) {\n          this.logger.info(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\n          var tokenRequest = this.buildIDTokenRequest(request);\n          this.silentLogin = true;\n          this.acquireTokenSilent(tokenRequest).then(function (response) {\n            _this.silentLogin = false;\n\n            _this.logger.info(\"Unified cache call is successful\");\n\n            _this.authResponseHandler(interactionType, response, resolve);\n\n            return;\n          }, function (error) {\n            _this.silentLogin = false;\n\n            _this.logger.error(\"Error occurred during unified cache ATS: \" + error); // proceed to login since ATS failed\n\n\n            _this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);\n          });\n        } // No ADAL token found, proceed to login\n        else {\n            this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);\n          }\n      } // AcquireToken call, but no account or context given, so throw error\n      else {\n          this.logger.info(\"User login is required\");\n          throw ClientAuthError.createUserLoginRequiredError();\n        }\n    } // User session exists\n    else {\n        this.acquireTokenHelper(account, interactionType, isLoginCall, request, scopes, resolve, reject);\n      }\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   * Helper function to acquireToken\r\n   *\r\n   */\n\n\n  UserAgentApplication.prototype.acquireTokenHelper = function (account, interactionType, isLoginCall, request, scopes, resolve, reject) {\n    var _this = this; // Track the acquireToken progress\n\n\n    if (isLoginCall) {\n      this.loginInProgress = true;\n    } else {\n      this.acquireTokenInProgress = true;\n    }\n\n    var scope = scopes ? scopes.join(\" \").toLowerCase() : this.clientId.toLowerCase();\n    var serverAuthenticationRequest;\n    var acquireTokenAuthority = !isLoginCall && request && request.authority ? AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;\n    var popUpWindow;\n\n    if (interactionType === Constants.interactionTypePopup) {\n      // Generate a popup window\n      popUpWindow = this.openWindow(\"about:blank\", \"_blank\", 1, this, resolve, reject);\n\n      if (!popUpWindow) {\n        // We pass reject in openWindow, we reject there during an error\n        return;\n      }\n    }\n\n    acquireTokenAuthority.resolveEndpointsAsync().then(function () {\n      // On Fulfillment\n      var responseType = isLoginCall ? ResponseTypes.id_token : _this.getTokenType(account, scopes, false);\n      var loginStartPage;\n\n      if (isLoginCall) {\n        // if the user sets the login start page - angular only??\n        loginStartPage = _this.cacheStorage.getItem(Constants.angularLoginRequest);\n\n        if (!loginStartPage || loginStartPage === \"\") {\n          loginStartPage = window.location.href;\n        } else {\n          _this.cacheStorage.setItem(Constants.angularLoginRequest, \"\");\n        }\n      }\n\n      serverAuthenticationRequest = new ServerRequestParameters(acquireTokenAuthority, _this.clientId, scopes, responseType, _this.getRedirectUri(), request && request.state);\n\n      _this.updateCacheEntries(serverAuthenticationRequest, account, loginStartPage); // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\n\n\n      serverAuthenticationRequest.populateQueryParams(account, request); // Construct urlNavigate\n\n      var urlNavigate = UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants.response_mode_fragment; // set state in cache\n\n      if (interactionType === Constants.interactionTypeRedirect) {\n        if (!isLoginCall) {\n          _this.cacheStorage.setItem(Constants.stateAcquireToken, serverAuthenticationRequest.state, _this.inCookie);\n        }\n      } else if (interactionType === Constants.interactionTypePopup) {\n        window.renewStates.push(serverAuthenticationRequest.state);\n        window.requestType = isLoginCall ? Constants.login : Constants.renewToken; // Register callback to capture results from server\n\n        _this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\n      } else {\n        throw ClientAuthError.createInvalidInteractionTypeError();\n      } // prompt user for interaction\n\n\n      _this.navigateWindow(urlNavigate, popUpWindow);\n    }).catch(function (err) {\n      _this.logger.warning(\"could not resolve endpoints\");\n\n      _this.authErrorHandler(interactionType, ClientAuthError.createEndpointResolutionError(err.toString), buildResponseStateOnly(request.state), reject);\n\n      if (popUpWindow) {\n        popUpWindow.close();\n      }\n    });\n  };\n  /**\r\n   * Use this function to obtain a token before every call to the API / resource provider\r\n   *\r\n   * MSAL return's a cached token when available\r\n   * Or it send's a request to the STS to obtain a new token using a hidden iframe.\r\n   *\r\n   * @param {@link AuthenticationParameters}\r\n   *\r\n   * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n   * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   *\r\n   */\n\n\n  UserAgentApplication.prototype.acquireTokenSilent = function (request) {\n    var _this = this;\n\n    if (!request) {\n      throw ClientConfigurationError.createEmptyRequestError();\n    }\n\n    return new Promise(function (resolve, reject) {\n      // Validate and filter scopes (the validate function will throw if validation fails)\n      _this.validateInputScope(request.scopes, true);\n\n      var scope = request.scopes.join(\" \").toLowerCase(); // if the developer passes an account, give that account the priority\n\n      var account = request.account || _this.getAccount(); // extract if there is an adalIdToken stashed in the cache\n\n\n      var adalIdToken = _this.cacheStorage.getItem(Constants.adalIdToken); //if there is no account logged in and no login_hint/sid is passed in the request\n\n\n      if (!account && !(request.sid || request.loginHint) && StringUtils.isEmpty(adalIdToken)) {\n        _this.logger.info(\"User login is required\");\n\n        return reject(ClientAuthError.createUserLoginRequiredError());\n      }\n\n      var responseType = _this.getTokenType(account, request.scopes, true);\n\n      var serverAuthenticationRequest = new ServerRequestParameters(AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority), _this.clientId, request.scopes, responseType, _this.getRedirectUri(), request && request.state); // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\n\n      if (ServerRequestParameters.isSSOParam(request) || account) {\n        serverAuthenticationRequest.populateQueryParams(account, request);\n      } //if user didn't pass login_hint/sid and adal's idtoken is present, extract the login_hint from the adalIdToken\n      else if (!account && !StringUtils.isEmpty(adalIdToken)) {\n          // if adalIdToken exists, extract the SSO info from the same\n          var adalIdTokenObject = TokenUtils.extractIdToken(adalIdToken);\n\n          _this.logger.verbose(\"ADAL's idToken exists. Extracting login information from ADAL's idToken \");\n\n          serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject);\n        }\n\n      var userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;\n      var authErr;\n      var cacheResultResponse;\n\n      if (!userContainedClaims && !request.forceRefresh) {\n        try {\n          cacheResultResponse = _this.getCachedToken(serverAuthenticationRequest, account);\n        } catch (e) {\n          authErr = e;\n        }\n      } // resolve/reject based on cacheResult\n\n\n      if (cacheResultResponse) {\n        _this.logger.info(\"Token is already in cache for scope:\" + scope);\n\n        resolve(cacheResultResponse);\n        return null;\n      } else if (authErr) {\n        _this.logger.infoPii(authErr.errorCode + \":\" + authErr.errorMessage);\n\n        reject(authErr);\n        return null;\n      } // else proceed with login\n      else {\n          var logMessage = void 0;\n\n          if (userContainedClaims) {\n            logMessage = \"Skipped cache lookup since claims were given.\";\n          } else if (request.forceRefresh) {\n            logMessage = \"Skipped cache lookup since request.forceRefresh option was set to true\";\n          } else {\n            logMessage = \"Token is not in cache for scope:\" + scope;\n          }\n\n          _this.logger.verbose(logMessage); // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the api.\n\n\n          if (!serverAuthenticationRequest.authorityInstance) {\n            serverAuthenticationRequest.authorityInstance = request.authority ? AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority) : _this.authorityInstance;\n          } // cache miss\n\n\n          return serverAuthenticationRequest.authorityInstance.resolveEndpointsAsync().then(function () {\n            // refresh attempt with iframe\n            // Already renewing for this scope, callback when we get the token.\n            if (window.activeRenewals[scope]) {\n              _this.logger.verbose(\"Renew token for scope: \" + scope + \" is in progress. Registering callback\"); // Active renewals contains the state for each renewal.\n\n\n              _this.registerCallback(window.activeRenewals[scope], scope, resolve, reject);\n            } else {\n              if (request.scopes && request.scopes.indexOf(_this.clientId) > -1 && request.scopes.length === 1) {\n                // App uses idToken to send to api endpoints\n                // Default scope is tracked as clientId to store this token\n                _this.logger.verbose(\"renewing idToken\");\n\n                _this.silentLogin = true;\n\n                _this.renewIdToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\n              } else {\n                // renew access token\n                _this.logger.verbose(\"renewing accesstoken\");\n\n                _this.renewToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\n              }\n            }\n          }).catch(function (err) {\n            _this.logger.warning(\"could not resolve endpoints\");\n\n            reject(ClientAuthError.createEndpointResolutionError(err.toString()));\n            return null;\n          });\n        }\n    });\n  }; //#endregion\n  //#region Popup Window Creation\n\n  /**\r\n   * @hidden\r\n   *\r\n   * Used to send the user to the redirect_uri after authentication is complete. The user's bearer token is attached to the URI fragment as an id_token/access_token field.\r\n   * This function also closes the popup window after redirection.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param interval\r\n   * @param instance\r\n   * @param resolve\r\n   * @param reject\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.openWindow = function (urlNavigate, title, interval, instance, resolve, reject) {\n    var _this = this; // Generate a popup window\n\n\n    var popupWindow;\n\n    try {\n      popupWindow = this.openPopup(urlNavigate, title, Constants.popUpWidth, Constants.popUpHeight);\n    } catch (e) {\n      instance.loginInProgress = false;\n      instance.acquireTokenInProgress = false;\n      this.logger.info(ClientAuthErrorMessage.popUpWindowError.code + \":\" + ClientAuthErrorMessage.popUpWindowError.desc);\n      this.cacheStorage.setItem(Constants.msalError, ClientAuthErrorMessage.popUpWindowError.code);\n      this.cacheStorage.setItem(Constants.msalErrorDescription, ClientAuthErrorMessage.popUpWindowError.desc);\n\n      if (reject) {\n        reject(ClientAuthError.createPopupWindowError());\n      }\n\n      return null;\n    } // Push popup window handle onto stack for tracking\n\n\n    window.openedWindows.push(popupWindow);\n    var pollTimer = window.setInterval(function () {\n      // If popup closed or login in progress, cancel login\n      if (popupWindow && popupWindow.closed && (instance.loginInProgress || instance.acquireTokenInProgress)) {\n        if (reject) {\n          reject(ClientAuthError.createUserCancelledError());\n        }\n\n        window.clearInterval(pollTimer);\n\n        if (_this.config.framework.isAngular) {\n          _this.broadcast(\"msal:popUpClosed\", ClientAuthErrorMessage.userCancelledError.code + Constants.resourceDelimiter + ClientAuthErrorMessage.userCancelledError.desc);\n\n          return;\n        }\n\n        instance.loginInProgress = false;\n        instance.acquireTokenInProgress = false;\n      }\n\n      try {\n        var popUpWindowLocation = popupWindow.location; // If the popup hash changes, close the popup window\n\n        if (popUpWindowLocation.href.indexOf(_this.getRedirectUri()) !== -1) {\n          window.clearInterval(pollTimer);\n          instance.loginInProgress = false;\n          instance.acquireTokenInProgress = false;\n\n          _this.logger.info(\"Closing popup window\"); // TODO: Check how this can be extracted for any framework specific code?\n\n\n          if (_this.config.framework.isAngular) {\n            _this.broadcast(\"msal:popUpHashChanged\", popUpWindowLocation.hash);\n\n            for (var i = 0; i < window.openedWindows.length; i++) {\n              window.openedWindows[i].close();\n            }\n          }\n        }\n      } catch (e) {// Cross Domain url check error.\n        // Will be thrown until AAD redirects the user back to the app\"s root page with the token.\n        // No need to log or throw this error as it will create unnecessary traffic.\n      }\n    }, interval);\n    return popupWindow;\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  UserAgentApplication.prototype.openPopup = function (urlNavigate, title, popUpWidth, popUpHeight) {\n    try {\n      /**\r\n       * adding winLeft and winTop to account for dual monitor\r\n       * using screenLeft and screenTop for IE8 and earlier\r\n       */\n      var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n      var winTop = window.screenTop ? window.screenTop : window.screenY;\n      /**\r\n       * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n       * using document.documentElement.clientWidth for IE8 and earlier\r\n       */\n\n      var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n      var left = width / 2 - popUpWidth / 2 + winLeft;\n      var top_1 = height / 2 - popUpHeight / 2 + winTop; // open the window\n\n      var popupWindow = window.open(urlNavigate, title, \"width=\" + popUpWidth + \", height=\" + popUpHeight + \", top=\" + top_1 + \", left=\" + left);\n\n      if (!popupWindow) {\n        throw ClientAuthError.createPopupWindowError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.loginInProgress = false;\n      this.acquireTokenInProgress = false;\n      throw ClientAuthError.createPopupWindowError(e.toString());\n    }\n  }; //#endregion\n  //#region Iframe Management\n\n  /**\r\n   * @hidden\r\n   * Returns whether current window is in ifram for token renewal\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\r\n   * @hidden\r\n   * Returns whether parent window exists and has msal\r\n   */\n\n\n  UserAgentApplication.prototype.parentIsMsal = function () {\n    return window.parent !== window && window.parent.msal;\n  };\n  /**\r\n   * @hidden\r\n   * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.\r\n   * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.loadIframeTimeout = function (urlNavigate, frameName, scope) {\n    var _this = this; //set iframe session to pending\n\n\n    var expectedState = window.activeRenewals[scope];\n    this.logger.verbose(\"Set loading state to pending for: \" + scope + \":\" + expectedState);\n    this.cacheStorage.setItem(Constants.renewStatus + expectedState, Constants.tokenRenewStatusInProgress);\n    this.loadFrame(urlNavigate, frameName);\n    setTimeout(function () {\n      if (_this.cacheStorage.getItem(Constants.renewStatus + expectedState) === Constants.tokenRenewStatusInProgress) {\n        // fail the iframe session if it\"s in pending state\n        _this.logger.verbose(\"Loading frame has timed out after: \" + _this.config.system.loadFrameTimeout / 1000 + \" seconds for scope \" + scope + \":\" + expectedState); // Error after timeout\n\n\n        if (expectedState && window.callbackMappedToRenewStates[expectedState]) {\n          window.callbackMappedToRenewStates[expectedState](null, ClientAuthError.createTokenRenewalTimeoutError());\n        }\n\n        _this.cacheStorage.setItem(Constants.renewStatus + expectedState, Constants.tokenRenewStatusCancelled);\n      }\n    }, this.config.system.loadFrameTimeout);\n  };\n  /**\r\n   * @hidden\r\n   * Loads iframe with authorization endpoint URL\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.loadFrame = function (urlNavigate, frameName) {\n    var _this = this; // This trick overcomes iframe navigation in IE\n    // IE does not load the page consistently in iframe\n\n\n    this.logger.info(\"LoadFrame: \" + frameName);\n    var frameCheck = frameName;\n    setTimeout(function () {\n      var frameHandle = _this.addHiddenIFrame(frameCheck);\n\n      if (frameHandle.src === \"\" || frameHandle.src === \"about:blank\") {\n        frameHandle.src = urlNavigate;\n\n        _this.logger.infoPii(\"Frame Name : \" + frameName + \" Navigated to: \" + urlNavigate);\n      }\n    }, this.config.system.navigateFrameWait);\n  };\n  /**\r\n   * @hidden\r\n   * Adds the hidden iframe for silent token renewal.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.addHiddenIFrame = function (iframeId) {\n    if (typeof iframeId === \"undefined\") {\n      return null;\n    }\n\n    this.logger.info(\"Add msal frame to document:\" + iframeId);\n    var adalFrame = document.getElementById(iframeId);\n\n    if (!adalFrame) {\n      if (document.createElement && document.documentElement && window.navigator.userAgent.indexOf(\"MSIE 5.0\") === -1) {\n        var ifr = document.createElement(\"iframe\");\n        ifr.setAttribute(\"id\", iframeId);\n        ifr.style.visibility = \"hidden\";\n        ifr.style.position = \"absolute\";\n        ifr.style.width = ifr.style.height = \"0\";\n        ifr.style.border = \"0\";\n        adalFrame = document.getElementsByTagName(\"body\")[0].appendChild(ifr);\n      } else if (document.body && document.body.insertAdjacentHTML) {\n        document.body.insertAdjacentHTML(\"beforeend\", \"<iframe name='\" + iframeId + \"' id='\" + iframeId + \"' style='display:none'></iframe>\");\n      }\n\n      if (window.frames && window.frames[iframeId]) {\n        adalFrame = window.frames[iframeId];\n      }\n    }\n\n    return adalFrame;\n  }; //#endregion\n  //#region General Helpers\n\n  /**\r\n   * @hidden\r\n   * Used to redirect the browser to the STS authorization endpoint\r\n   * @param {string} urlNavigate - URL of the authorization endpoint\r\n   */\n\n\n  UserAgentApplication.prototype.navigateWindow = function (urlNavigate, popupWindow) {\n    // Navigate if valid URL\n    if (urlNavigate && !StringUtils.isEmpty(urlNavigate)) {\n      var navigateWindow = popupWindow ? popupWindow : window;\n      var logMessage = popupWindow ? \"Navigated Popup window to:\" + urlNavigate : \"Navigate to:\" + urlNavigate;\n      this.logger.infoPii(logMessage);\n      navigateWindow.location.replace(urlNavigate);\n    } else {\n      this.logger.info(\"Navigate url is empty\");\n      throw AuthError.createUnexpectedError(\"Navigate url is empty\");\n    }\n  };\n  /**\r\n   * @hidden\r\n   * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object\r\n   * @param {string} expectedState - Unique state identifier (guid).\r\n   * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {Function} resolve - The resolve function of the promise object.\r\n   * @param {Function} reject - The reject function of the promise object.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.registerCallback = function (expectedState, scope, resolve, reject) {\n    var _this = this; // track active renewals\n\n\n    window.activeRenewals[scope] = expectedState; // initialize callbacks mapped array\n\n    if (!window.promiseMappedToRenewStates[expectedState]) {\n      window.promiseMappedToRenewStates[expectedState] = [];\n    } // indexing on the current state, push the callback params to callbacks mapped\n\n\n    window.promiseMappedToRenewStates[expectedState].push({\n      resolve: resolve,\n      reject: reject\n    }); // Store the server esponse in the current window??\n\n    if (!window.callbackMappedToRenewStates[expectedState]) {\n      window.callbackMappedToRenewStates[expectedState] = function (response, error) {\n        // reset active renewals\n        window.activeRenewals[scope] = null; // for all promiseMappedtoRenewStates for a given 'state' - call the reject/resolve with error/token respectively\n\n        for (var i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {\n          try {\n            if (error) {\n              window.promiseMappedToRenewStates[expectedState][i].reject(error);\n            } else if (response) {\n              window.promiseMappedToRenewStates[expectedState][i].resolve(response);\n            } else {\n              throw AuthError.createUnexpectedError(\"Error and response are both null\");\n            }\n          } catch (e) {\n            _this.logger.warning(e);\n          }\n        } // reset\n\n\n        window.promiseMappedToRenewStates[expectedState] = null;\n        window.callbackMappedToRenewStates[expectedState] = null;\n      };\n    }\n  }; //#endregion\n  //#region Logout\n\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   */\n\n\n  UserAgentApplication.prototype.logout = function () {\n    var _this = this;\n\n    this.clearCache();\n    this.account = null;\n    var logout = \"\";\n\n    if (this.getPostLogoutRedirectUri()) {\n      logout = \"post_logout_redirect_uri=\" + encodeURIComponent(this.getPostLogoutRedirectUri());\n    }\n\n    this.authorityInstance.resolveEndpointsAsync().then(function (authority) {\n      var urlNavigate = authority.EndSessionEndpoint ? authority.EndSessionEndpoint + \"?\" + logout : _this.authority + \"oauth2/v2.0/logout?\" + logout;\n\n      _this.navigateWindow(urlNavigate);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Clear all access tokens in the cache.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.clearCache = function () {\n    window.renewStates = [];\n    var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\n\n    for (var i = 0; i < accessTokenItems.length; i++) {\n      this.cacheStorage.removeItem(JSON.stringify(accessTokenItems[i].key));\n    }\n\n    this.cacheStorage.resetCacheItems();\n    this.cacheStorage.clearCookie();\n  };\n  /**\r\n   * @hidden\r\n   * Clear a given access token from the cache.\r\n   *\r\n   * @param accessToken\r\n   */\n\n\n  UserAgentApplication.prototype.clearCacheForScope = function (accessToken) {\n    var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\n\n    for (var i = 0; i < accessTokenItems.length; i++) {\n      var token = accessTokenItems[i];\n\n      if (token.value.accessToken === accessToken) {\n        this.cacheStorage.removeItem(JSON.stringify(token.key));\n      }\n    }\n  }; //#endregion\n  //#region Response\n\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.\r\n   * @param {string} hash - Hash passed from redirect page.\r\n   * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.\r\n   */\n\n\n  UserAgentApplication.prototype.isCallback = function (hash) {\n    this.logger.info(\"isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.\");\n    return this.urlContainsHash(hash);\n  };\n\n  UserAgentApplication.prototype.urlContainsHash = function (urlString) {\n    var parameters = this.deserializeHash(urlString);\n    return parameters.hasOwnProperty(Constants.errorDescription) || parameters.hasOwnProperty(Constants.error) || parameters.hasOwnProperty(Constants.accessToken) || parameters.hasOwnProperty(Constants.idToken);\n  };\n  /**\r\n   * @hidden\r\n   * Used to call the constructor callback with the token/error\r\n   * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n   */\n\n\n  UserAgentApplication.prototype.processCallBack = function (hash, stateInfo, parentCallback) {\n    this.logger.info(\"Processing the callback from redirect response\"); // get the state info from the hash\n\n    if (!stateInfo) {\n      stateInfo = this.getResponseState(hash);\n    }\n\n    var response;\n    var authErr; // Save the token info from the hash\n\n    try {\n      response = this.saveTokenFromHash(hash, stateInfo);\n    } catch (err) {\n      authErr = err;\n    } // remove hash from the cache\n\n\n    this.cacheStorage.removeItem(Constants.urlHash);\n\n    try {\n      // Clear the cookie in the hash\n      this.cacheStorage.clearCookie();\n      var accountState = this.getAccountState(stateInfo.state);\n\n      if (response) {\n        if (stateInfo.requestType === Constants.renewToken || response.accessToken) {\n          if (window.parent !== window) {\n            this.logger.verbose(\"Window is in iframe, acquiring token silently\");\n          } else {\n            this.logger.verbose(\"acquiring token interactive in progress\");\n          }\n\n          response.tokenType = Constants.accessToken;\n        } else if (stateInfo.requestType === Constants.login) {\n          response.tokenType = Constants.idToken;\n        }\n\n        if (!parentCallback) {\n          this.authResponseHandler(Constants.interactionTypeRedirect, response);\n          return;\n        }\n      } else if (!parentCallback) {\n        this.authErrorHandler(Constants.interactionTypeRedirect, authErr, buildResponseStateOnly(accountState));\n        return;\n      }\n\n      parentCallback(response, authErr);\n    } catch (err) {\n      this.logger.error(\"Error occurred in token received callback function: \" + err);\n      throw ClientAuthError.createErrorInCallbackFunction(err.toString());\n    }\n  };\n  /**\r\n   * @hidden\r\n   * This method must be called for processing the response received from the STS. It extracts the hash, processes the token or error information and saves it in the cache. It then\r\n   * calls the registered callbacks in case of redirect or resolves the promises with the result.\r\n   * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n   */\n\n\n  UserAgentApplication.prototype.handleAuthenticationResponse = function (hash) {\n    // retrieve the hash\n    if (hash == null) {\n      hash = window.location.hash;\n    }\n\n    var self = null;\n    var isPopup = false;\n    var isWindowOpenerMsal = false; // Check if the current window opened the iFrame/popup\n\n    try {\n      isWindowOpenerMsal = window.opener && window.opener.msal && window.opener.msal !== window.msal;\n    } catch (err) {\n      // err = SecurityError: Blocked a frame with origin \"[url]\" from accessing a cross-origin frame.\n      isWindowOpenerMsal = false;\n    } // Set the self to the window that created the popup/iframe\n\n\n    if (isWindowOpenerMsal) {\n      self = window.opener.msal;\n      isPopup = true;\n    } else if (window.parent && window.parent.msal) {\n      self = window.parent.msal;\n    } // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically\n\n\n    var stateInfo = self.getResponseState(hash);\n    var tokenResponseCallback = null;\n    self.logger.info(\"Returned from redirect url\"); // If parent window is the msal instance which opened the current window (iframe)\n\n    if (this.parentIsMsal()) {\n      tokenResponseCallback = window.parent.callbackMappedToRenewStates[stateInfo.state];\n    } // Current window is window opener (popup)\n    else if (isWindowOpenerMsal) {\n        tokenResponseCallback = window.opener.callbackMappedToRenewStates[stateInfo.state];\n      } // Redirect cases\n      else {\n          tokenResponseCallback = null; // if set to navigate to loginRequest page post login\n\n          if (self.config.auth.navigateToLoginRequestUrl) {\n            self.cacheStorage.setItem(Constants.urlHash, hash);\n\n            if (window.parent === window && !isPopup) {\n              window.location.href = self.cacheStorage.getItem(Constants.loginRequest, self.inCookie);\n            }\n\n            return;\n          } else {\n            window.location.hash = \"\";\n          }\n\n          if (!this.redirectCallbacksSet) {\n            // We reached this point too early - cache hash, return and process in handleRedirectCallbacks\n            self.cacheStorage.setItem(Constants.urlHash, hash);\n            return;\n          }\n        }\n\n    self.processCallBack(hash, stateInfo, tokenResponseCallback); // If current window is opener, close all windows\n\n    if (isWindowOpenerMsal) {\n      for (var i = 0; i < window.opener.openedWindows.length; i++) {\n        window.opener.openedWindows[i].close();\n      }\n    }\n  };\n  /**\r\n   * @hidden\r\n   * Returns deserialized portion of URL hash\r\n   * @param hash\r\n   */\n\n\n  UserAgentApplication.prototype.deserializeHash = function (urlFragment) {\n    var hash = UrlUtils.getHashFromUrl(urlFragment);\n    return CryptoUtils.deserialize(hash);\n  };\n  /**\r\n   * @hidden\r\n   * Creates a stateInfo object from the URL fragment and returns it.\r\n   * @param {string} hash  -  Hash passed from redirect page\r\n   * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getResponseState = function (hash) {\n    var parameters = this.deserializeHash(hash);\n    var stateResponse;\n\n    if (!parameters) {\n      throw AuthError.createUnexpectedError(\"Hash was not parsed correctly.\");\n    }\n\n    if (parameters.hasOwnProperty(\"state\")) {\n      stateResponse = {\n        requestType: Constants.unknown,\n        state: parameters.state,\n        stateMatch: false\n      };\n    } else {\n      throw AuthError.createUnexpectedError(\"Hash does not contain state.\");\n    } // async calls can fire iframe and login request at the same time if developer does not use the API as expected\n    // incoming callback needs to be looked up to find the request type\n    // loginRedirect\n\n\n    if (stateResponse.state === this.cacheStorage.getItem(Constants.stateLogin, this.inCookie) || stateResponse.state === this.silentAuthenticationState) {\n      // loginRedirect\n      stateResponse.requestType = Constants.login;\n      stateResponse.stateMatch = true;\n      return stateResponse;\n    } // acquireTokenRedirect\n    else if (stateResponse.state === this.cacheStorage.getItem(Constants.stateAcquireToken, this.inCookie)) {\n        //acquireTokenRedirect\n        stateResponse.requestType = Constants.renewToken;\n        stateResponse.stateMatch = true;\n        return stateResponse;\n      } // external api requests may have many renewtoken requests for different resource\n\n\n    if (!stateResponse.stateMatch) {\n      stateResponse.requestType = window.requestType;\n      var statesInParentContext = window.renewStates;\n\n      for (var i = 0; i < statesInParentContext.length; i++) {\n        if (statesInParentContext[i] === stateResponse.state) {\n          stateResponse.stateMatch = true;\n          break;\n        }\n      }\n    }\n\n    return stateResponse;\n  }; //#endregion\n  //#region Token Processing (Extract to TokenProcessing.ts)\n\n  /**\r\n   * @hidden\r\n   * Used to get token for the specified set of scopes from the cache\r\n   * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token\r\n   * @param {Account} account - Account for which the scopes were requested\r\n   */\n\n\n  UserAgentApplication.prototype.getCachedToken = function (serverAuthenticationRequest, account) {\n    var accessTokenCacheItem = null;\n    var scopes = serverAuthenticationRequest.scopes; // filter by clientId and account\n\n    var tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null); // No match found after initial filtering\n\n    if (tokenCacheItems.length === 0) {\n      return null;\n    }\n\n    var filteredItems = []; // if no authority passed\n\n    if (!serverAuthenticationRequest.authority) {\n      // filter by scope\n      for (var i = 0; i < tokenCacheItems.length; i++) {\n        var cacheItem = tokenCacheItems[i];\n        var cachedScopes = cacheItem.key.scopes.split(\" \");\n\n        if (ScopeSet.containsScope(cachedScopes, scopes)) {\n          filteredItems.push(cacheItem);\n        }\n      } // if only one cached token found\n\n\n      if (filteredItems.length === 1) {\n        accessTokenCacheItem = filteredItems[0];\n        serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);\n      } // if more than one cached token is found\n      else if (filteredItems.length > 1) {\n          throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\n        } // if no match found, check if there was a single authority used\n        else {\n            var authorityList = this.getUniqueAuthority(tokenCacheItems, \"authority\");\n\n            if (authorityList.length > 1) {\n              throw ClientAuthError.createMultipleAuthoritiesInCacheError(scopes.toString());\n            }\n\n            serverAuthenticationRequest.authorityInstance = AuthorityFactory.CreateInstance(authorityList[0], this.config.auth.validateAuthority);\n          }\n    } // if an authority is passed in the API\n    else {\n        // filter by authority and scope\n        for (var i = 0; i < tokenCacheItems.length; i++) {\n          var cacheItem = tokenCacheItems[i];\n          var cachedScopes = cacheItem.key.scopes.split(\" \");\n\n          if (ScopeSet.containsScope(cachedScopes, scopes) && UrlUtils.CanonicalizeUri(cacheItem.key.authority) === serverAuthenticationRequest.authority) {\n            filteredItems.push(cacheItem);\n          }\n        } // no match\n\n\n        if (filteredItems.length === 0) {\n          return null;\n        } // if only one cachedToken Found\n        else if (filteredItems.length === 1) {\n            accessTokenCacheItem = filteredItems[0];\n          } else {\n            // if more than cached token is found\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\n          }\n      }\n\n    if (accessTokenCacheItem != null) {\n      var expired = Number(accessTokenCacheItem.value.expiresIn); // If expiration is within offset, it will force renew\n\n      var offset = this.config.system.tokenRenewalOffsetSeconds || 300;\n\n      if (expired && expired > TimeUtils.now() + offset) {\n        var idTokenObj = new IdToken(accessTokenCacheItem.value.idToken);\n\n        if (!account) {\n          account = this.getAccount();\n\n          if (!account) {\n            throw AuthError.createUnexpectedError(\"Account should not be null here.\");\n          }\n        }\n\n        var aState = this.getAccountState(serverAuthenticationRequest.state);\n        var response = {\n          uniqueId: \"\",\n          tenantId: \"\",\n          tokenType: accessTokenCacheItem.value.idToken === accessTokenCacheItem.value.accessToken ? Constants.idToken : Constants.accessToken,\n          idToken: idTokenObj,\n          idTokenClaims: idTokenObj.claims,\n          accessToken: accessTokenCacheItem.value.accessToken,\n          scopes: accessTokenCacheItem.key.scopes.split(\" \"),\n          expiresOn: new Date(expired * 1000),\n          account: account,\n          accountState: aState\n        };\n        ResponseUtils.setResponseIdToken(response, idTokenObj);\n        return response;\n      } else {\n        this.cacheStorage.removeItem(JSON.stringify(filteredItems[0].key));\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @hidden\r\n   * Used to get a unique list of authoritues from the cache\r\n   * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getUniqueAuthority = function (accessTokenCacheItems, property) {\n    var authorityList = [];\n    var flags = [];\n    accessTokenCacheItems.forEach(function (element) {\n      if (element.key.hasOwnProperty(property) && flags.indexOf(element.key[property]) === -1) {\n        flags.push(element.key[property]);\n        authorityList.push(element.key[property]);\n      }\n    });\n    return authorityList;\n  };\n  /**\r\n   * @hidden\r\n   * Check if ADAL id_token exists and return if exists.\r\n   *\r\n   */\n\n\n  UserAgentApplication.prototype.extractADALIdToken = function () {\n    var adalIdToken = this.cacheStorage.getItem(Constants.adalIdToken);\n\n    if (!StringUtils.isEmpty(adalIdToken)) {\n      return TokenUtils.extractIdToken(adalIdToken);\n    }\n\n    return null;\n  };\n  /**\r\n   * @hidden\r\n   * Acquires access token using a hidden iframe.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.renewToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\n    var scope = scopes.join(\" \").toLowerCase();\n    this.logger.verbose(\"renewToken is called for scope:\" + scope);\n    var frameHandle = this.addHiddenIFrame(\"msalRenewFrame\" + scope);\n    this.updateCacheEntries(serverAuthenticationRequest, account);\n    this.logger.verbose(\"Renew token Expected state: \" + serverAuthenticationRequest.state); // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\n\n    var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none;\n    window.renewStates.push(serverAuthenticationRequest.state);\n    window.requestType = Constants.renewToken;\n    this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\n    this.logger.infoPii(\"Navigate to:\" + urlNavigate);\n    frameHandle.src = \"about:blank\";\n    this.loadIframeTimeout(urlNavigate, \"msalRenewFrame\" + scope, scope);\n  };\n  /**\r\n   * @hidden\r\n   * Renews idtoken for app\"s own backend when clientId is passed as a single scope in the scopes array.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.renewIdToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\n    this.logger.info(\"renewidToken is called\");\n    var frameHandle = this.addHiddenIFrame(\"msalIdTokenFrame\");\n    this.updateCacheEntries(serverAuthenticationRequest, account);\n    this.logger.verbose(\"Renew Idtoken Expected state: \" + serverAuthenticationRequest.state); // Build urlNavigate with \"prompt=none\" and navigate to URL in hidden iFrame\n\n    var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none;\n\n    if (this.silentLogin) {\n      window.requestType = Constants.login;\n      this.silentAuthenticationState = serverAuthenticationRequest.state;\n    } else {\n      window.requestType = Constants.renewToken;\n      window.renewStates.push(serverAuthenticationRequest.state);\n    } // note: scope here is clientId\n\n\n    this.registerCallback(serverAuthenticationRequest.state, this.clientId, resolve, reject);\n    this.logger.infoPii(\"Navigate to:\" + urlNavigate);\n    frameHandle.src = \"about:blank\";\n    this.loadIframeTimeout(urlNavigate, \"msalIdTokenFrame\", this.clientId);\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.\r\n   * @param {string} authority authority received in the redirect response from AAD.\r\n   * @param {TokenResponse} requestInfo an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n   * @param {Account} account account object for which scopes are consented for. The default account is the logged in account.\r\n   * @param {ClientInfo} clientInfo clientInfo received as part of the response comprising of fields uid and utid.\r\n   * @param {IdToken} idToken idToken received as part of the response.\r\n   * @ignore\r\n   * @private\r\n   */\n\n  /* tslint:disable:no-string-literal */\n\n\n  UserAgentApplication.prototype.saveAccessToken = function (response, authority, parameters, clientInfo, idTokenObj) {\n    var scope;\n\n    var accessTokenResponse = tslib_1.__assign({}, response);\n\n    var clientObj = new ClientInfo(clientInfo);\n    var expiration; // if the response contains \"scope\"\n\n    if (parameters.hasOwnProperty(\"scope\")) {\n      // read the scopes\n      scope = parameters[\"scope\"];\n      var consentedScopes = scope.split(\" \"); // retrieve all access tokens from the cache, remove the dup scores\n\n      var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);\n\n      for (var i = 0; i < accessTokenCacheItems.length; i++) {\n        var accessTokenCacheItem = accessTokenCacheItems[i];\n\n        if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {\n          var cachedScopes = accessTokenCacheItem.key.scopes.split(\" \");\n\n          if (ScopeSet.isIntersectingScopes(cachedScopes, consentedScopes)) {\n            this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));\n          }\n        }\n      } // Generate and cache accessTokenKey and accessTokenValue\n\n\n      var expiresIn = TimeUtils.parseExpiresIn(parameters[Constants.expiresIn]);\n      expiration = TimeUtils.now() + expiresIn;\n      var accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\n      var accessTokenValue = new AccessTokenValue(parameters[Constants.accessToken], idTokenObj.rawIdToken, expiration.toString(), clientInfo);\n      this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\n      accessTokenResponse.accessToken = parameters[Constants.accessToken];\n      accessTokenResponse.scopes = consentedScopes;\n    } // if the response does not contain \"scope\" - scope is usually client_id and the token will be id_token\n    else {\n        scope = this.clientId; // Generate and cache accessTokenKey and accessTokenValue\n\n        var accessTokenKey = new AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\n        expiration = Number(idTokenObj.expiration);\n        var accessTokenValue = new AccessTokenValue(parameters[Constants.idToken], parameters[Constants.idToken], expiration.toString(), clientInfo);\n        this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\n        accessTokenResponse.scopes = [scope];\n        accessTokenResponse.accessToken = parameters[Constants.idToken];\n      }\n\n    if (expiration) {\n      accessTokenResponse.expiresOn = new Date(expiration * 1000);\n    } else {\n      this.logger.error(\"Could not parse expiresIn parameter\");\n    }\n\n    return accessTokenResponse;\n  };\n  /**\r\n   * @hidden\r\n   * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.saveTokenFromHash = function (hash, stateInfo) {\n    this.logger.info(\"State status:\" + stateInfo.stateMatch + \"; Request type:\" + stateInfo.requestType);\n    this.cacheStorage.setItem(Constants.msalError, \"\");\n    this.cacheStorage.setItem(Constants.msalErrorDescription, \"\");\n    var response = {\n      uniqueId: \"\",\n      tenantId: \"\",\n      tokenType: \"\",\n      idToken: null,\n      idTokenClaims: null,\n      accessToken: null,\n      scopes: [],\n      expiresOn: null,\n      account: null,\n      accountState: \"\"\n    };\n    var error;\n    var hashParams = this.deserializeHash(hash);\n    var authorityKey = \"\";\n    var acquireTokenAccountKey = \"\";\n    var idTokenObj = null; // If server returns an error\n\n    if (hashParams.hasOwnProperty(Constants.errorDescription) || hashParams.hasOwnProperty(Constants.error)) {\n      this.logger.infoPii(\"Error :\" + hashParams[Constants.error] + \"; Error description:\" + hashParams[Constants.errorDescription]);\n      this.cacheStorage.setItem(Constants.msalError, hashParams[Constants.error]);\n      this.cacheStorage.setItem(Constants.msalErrorDescription, hashParams[Constants.errorDescription]); // login\n\n      if (stateInfo.requestType === Constants.login) {\n        this.loginInProgress = false;\n        this.cacheStorage.setItem(Constants.loginError, hashParams[Constants.errorDescription] + \":\" + hashParams[Constants.error]);\n        authorityKey = Storage.generateAuthorityKey(stateInfo.state);\n      } // acquireToken\n\n\n      if (stateInfo.requestType === Constants.renewToken) {\n        this.acquireTokenInProgress = false;\n        authorityKey = Storage.generateAuthorityKey(stateInfo.state);\n        var account = this.getAccount();\n        var accountId = void 0;\n\n        if (account && !StringUtils.isEmpty(account.homeAccountIdentifier)) {\n          accountId = account.homeAccountIdentifier;\n        } else {\n          accountId = Constants.no_account;\n        }\n\n        acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountId, stateInfo.state);\n      }\n\n      var _a = Constants.error,\n          hashErr = hashParams[_a],\n          _b = Constants.errorDescription,\n          hashErrDesc = hashParams[_b];\n\n      if (InteractionRequiredAuthError.isInteractionRequiredError(hashErr) || InteractionRequiredAuthError.isInteractionRequiredError(hashErrDesc)) {\n        error = new InteractionRequiredAuthError(hashParams[Constants.error], hashParams[Constants.errorDescription]);\n      } else {\n        error = new ServerError(hashParams[Constants.error], hashParams[Constants.errorDescription]);\n      }\n    } // If the server returns \"Success\"\n    else {\n        // Verify the state from redirect and record tokens to storage if exists\n        if (stateInfo.stateMatch) {\n          this.logger.info(\"State is right\");\n\n          if (hashParams.hasOwnProperty(Constants.sessionState)) {\n            this.cacheStorage.setItem(Constants.msalSessionState, hashParams[Constants.sessionState]);\n          }\n\n          response.accountState = this.getAccountState(stateInfo.state);\n          var clientInfo = \"\"; // Process access_token\n\n          if (hashParams.hasOwnProperty(Constants.accessToken)) {\n            this.logger.info(\"Fragment has access token\");\n            this.acquireTokenInProgress = false; // retrieve the id_token from response if present\n\n            if (hashParams.hasOwnProperty(Constants.idToken)) {\n              idTokenObj = new IdToken(hashParams[Constants.idToken]);\n              response.idToken = idTokenObj;\n              response.idTokenClaims = idTokenObj.claims;\n            } else {\n              idTokenObj = new IdToken(this.cacheStorage.getItem(Constants.idTokenKey));\n              response = ResponseUtils.setResponseIdToken(response, idTokenObj);\n            } // retrieve the authority from cache and replace with tenantID\n\n\n            var authorityKey_1 = Storage.generateAuthorityKey(stateInfo.state);\n            var authority = this.cacheStorage.getItem(authorityKey_1, this.inCookie);\n\n            if (!StringUtils.isEmpty(authority)) {\n              authority = UrlUtils.replaceTenantPath(authority, response.tenantId);\n            } // retrieve client_info - if it is not found, generate the uid and utid from idToken\n\n\n            if (hashParams.hasOwnProperty(Constants.clientInfo)) {\n              clientInfo = hashParams[Constants.clientInfo];\n            } else {\n              this.logger.warning(\"ClientInfo not received in the response from AAD\");\n              throw ClientAuthError.createClientInfoNotPopulatedError(\"ClientInfo not received in the response from the server\");\n            }\n\n            response.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));\n            var accountKey = void 0;\n\n            if (response.account && !StringUtils.isEmpty(response.account.homeAccountIdentifier)) {\n              accountKey = response.account.homeAccountIdentifier;\n            } else {\n              accountKey = Constants.no_account;\n            }\n\n            acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountKey, stateInfo.state);\n            var acquireTokenAccountKey_noaccount = Storage.generateAcquireTokenAccountKey(Constants.no_account, stateInfo.state);\n            var cachedAccount = this.cacheStorage.getItem(acquireTokenAccountKey);\n            var acquireTokenAccount = void 0; // Check with the account in the Cache\n\n            if (!StringUtils.isEmpty(cachedAccount)) {\n              acquireTokenAccount = JSON.parse(cachedAccount);\n\n              if (response.account && acquireTokenAccount && Account.compareAccounts(response.account, acquireTokenAccount)) {\n                response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\n                this.logger.info(\"The user object received in the response is the same as the one passed in the acquireToken request\");\n              } else {\n                this.logger.warning(\"The account object created from the response is not the same as the one passed in the acquireToken request\");\n              }\n            } else if (!StringUtils.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {\n              response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\n            }\n          } // Process id_token\n\n\n          if (hashParams.hasOwnProperty(Constants.idToken)) {\n            this.logger.info(\"Fragment has id token\"); // login no longer in progress\n\n            this.loginInProgress = false; // set the idToken\n\n            idTokenObj = new IdToken(hashParams[Constants.idToken]);\n            response = ResponseUtils.setResponseIdToken(response, idTokenObj);\n\n            if (hashParams.hasOwnProperty(Constants.clientInfo)) {\n              clientInfo = hashParams[Constants.clientInfo];\n            } else {\n              this.logger.warning(\"ClientInfo not received in the response from AAD\");\n            }\n\n            authorityKey = Storage.generateAuthorityKey(stateInfo.state);\n            var authority = this.cacheStorage.getItem(authorityKey, this.inCookie);\n\n            if (!StringUtils.isEmpty(authority)) {\n              authority = UrlUtils.replaceTenantPath(authority, idTokenObj.tenantId);\n            }\n\n            this.account = Account.createAccount(idTokenObj, new ClientInfo(clientInfo));\n            response.account = this.account;\n\n            if (idTokenObj && idTokenObj.nonce) {\n              // check nonce integrity if idToken has nonce - throw an error if not matched\n              if (idTokenObj.nonce !== this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie)) {\n                this.account = null;\n                this.cacheStorage.setItem(Constants.loginError, \"Nonce Mismatch. Expected Nonce: \" + this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\n                this.logger.error(\"Nonce Mismatch.Expected Nonce: \" + this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie) + \",\" + \"Actual Nonce: \" + idTokenObj.nonce);\n                error = ClientAuthError.createNonceMismatchError(this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie), idTokenObj.nonce);\n              } // Save the token\n              else {\n                  this.cacheStorage.setItem(Constants.idTokenKey, hashParams[Constants.idToken]);\n                  this.cacheStorage.setItem(Constants.msalClientInfo, clientInfo); // Save idToken as access token for app itself\n\n                  this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\n                }\n            } else {\n              authorityKey = stateInfo.state;\n              acquireTokenAccountKey = stateInfo.state;\n              this.logger.error(\"Invalid id_token received in the response\");\n              error = ClientAuthError.createInvalidIdTokenError(idTokenObj);\n              this.cacheStorage.setItem(Constants.msalError, error.errorCode);\n              this.cacheStorage.setItem(Constants.msalErrorDescription, error.errorMessage);\n            }\n          }\n        } // State mismatch - unexpected/invalid state\n        else {\n            authorityKey = stateInfo.state;\n            acquireTokenAccountKey = stateInfo.state;\n            var expectedState = this.cacheStorage.getItem(Constants.stateLogin, this.inCookie);\n            this.logger.error(\"State Mismatch.Expected State: \" + expectedState + \",\" + \"Actual State: \" + stateInfo.state);\n            error = ClientAuthError.createInvalidStateError(stateInfo.state, expectedState);\n            this.cacheStorage.setItem(Constants.msalError, error.errorCode);\n            this.cacheStorage.setItem(Constants.msalErrorDescription, error.errorMessage);\n          }\n      }\n\n    this.cacheStorage.setItem(Constants.renewStatus + stateInfo.state, Constants.tokenRenewStatusCompleted);\n    this.cacheStorage.removeAcquireTokenEntries(stateInfo.state); // this is required if navigateToLoginRequestUrl=false\n\n    if (this.inCookie) {\n      this.cacheStorage.setItemCookie(authorityKey, \"\", -1);\n      this.cacheStorage.clearCookie();\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    if (!response) {\n      throw AuthError.createUnexpectedError(\"Response is null\");\n    }\n\n    return response;\n  };\n  /* tslint:enable:no-string-literal */\n  //#endregion\n  //#region Account\n\n  /**\r\n   * Returns the signed in account\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no state is found\r\n   * @returns {@link Account} - the account object stored in MSAL\r\n   */\n\n\n  UserAgentApplication.prototype.getAccount = function () {\n    // if a session already exists, get the account from the session\n    if (this.account) {\n      return this.account;\n    } // frame is used to get idToken and populate the account for the given session\n\n\n    var rawIdToken = this.cacheStorage.getItem(Constants.idTokenKey);\n    var rawClientInfo = this.cacheStorage.getItem(Constants.msalClientInfo);\n\n    if (!StringUtils.isEmpty(rawIdToken) && !StringUtils.isEmpty(rawClientInfo)) {\n      var idToken = new IdToken(rawIdToken);\n      var clientInfo = new ClientInfo(rawClientInfo);\n      this.account = Account.createAccount(idToken, clientInfo);\n      return this.account;\n    } // if login not yet done, return null\n\n\n    return null;\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Extracts state value from the accountState sent with the authentication request.\r\n   * @returns {string} scope.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getAccountState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(\"|\");\n\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n\n    return state;\n  };\n  /**\r\n   * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.\r\n   *\r\n   * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.\r\n   */\n\n\n  UserAgentApplication.prototype.getAllAccounts = function () {\n    var accounts = [];\n    var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\n\n    for (var i = 0; i < accessTokenCacheItems.length; i++) {\n      var idToken = new IdToken(accessTokenCacheItems[i].value.idToken);\n      var clientInfo = new ClientInfo(accessTokenCacheItems[i].value.homeAccountIdentifier);\n      var account = Account.createAccount(idToken, clientInfo);\n      accounts.push(account);\n    }\n\n    return this.getUniqueAccounts(accounts);\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Used to filter accounts based on homeAccountIdentifier\r\n   * @param {Array<Account>}  Accounts - accounts saved in the cache\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getUniqueAccounts = function (accounts) {\n    if (!accounts || accounts.length <= 1) {\n      return accounts;\n    }\n\n    var flags = [];\n    var uniqueAccounts = [];\n\n    for (var index = 0; index < accounts.length; ++index) {\n      if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {\n        flags.push(accounts[index].homeAccountIdentifier);\n        uniqueAccounts.push(accounts[index]);\n      }\n    }\n\n    return uniqueAccounts;\n  }; //#endregion\n  //#region Scopes (Extract to Scopes.ts)\n  // Note: \"this\" dependency in this section is minimal.\n  // If pCacheStorage is separated from the class object, or passed as a fn param, scopesUtils.ts can be created\n\n  /**\r\n   * @hidden\r\n   *\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.validateInputScope = function (scopes, scopesRequired) {\n    if (!scopes) {\n      if (scopesRequired) {\n        throw ClientConfigurationError.createScopesRequiredError(scopes);\n      } else {\n        return;\n      }\n    } // Check that scopes is an array object (also throws error if scopes == null)\n\n\n    if (!Array.isArray(scopes)) {\n      throw ClientConfigurationError.createScopesNonArrayError(scopes);\n    } // Check that scopes is not an empty array\n\n\n    if (scopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n    } // Check that clientId is passed as single scope\n\n\n    if (scopes.indexOf(this.clientId) > -1) {\n      if (scopes.length > 1) {\n        throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\n      }\n    }\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Extracts scope value from the state sent with the authentication request.\r\n   * @param {string} state\r\n   * @returns {string} scope.\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getScopeFromState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(\"|\");\n\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n\n    return \"\";\n  };\n  /**\r\n   * @ignore\r\n   * Appends extraScopesToConsent if passed\r\n   * @param {@link AuthenticationParameters}\r\n   */\n\n\n  UserAgentApplication.prototype.appendScopes = function (request) {\n    var scopes;\n\n    if (request && request.scopes) {\n      if (request.extraScopesToConsent) {\n        scopes = request.scopes.concat(request.extraScopesToConsent);\n      } else {\n        scopes = request.scopes;\n      }\n    }\n\n    return scopes;\n  }; //#endregion\n  //#region Angular\n\n  /**\r\n   * @hidden\r\n   *\r\n   * Broadcast messages - Used only for Angular?  *\r\n   * @param eventName\r\n   * @param data\r\n   */\n\n\n  UserAgentApplication.prototype.broadcast = function (eventName, data) {\n    var evt = new CustomEvent(eventName, {\n      detail: data\n    });\n    window.dispatchEvent(evt);\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Helper function to retrieve the cached token\r\n   *\r\n   * @param scopes\r\n   * @param {@link Account} account\r\n   * @param state\r\n   * @return {@link AuthResponse} AuthResponse\r\n   */\n\n\n  UserAgentApplication.prototype.getCachedTokenInternal = function (scopes, account, state) {\n    // Get the current session's account object\n    var accountObject = account || this.getAccount();\n\n    if (!accountObject) {\n      return null;\n    } // Construct AuthenticationRequest based on response type\n\n\n    var newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory.CreateInstance(this.authority, this.config.auth.validateAuthority);\n    var responseType = this.getTokenType(accountObject, scopes, true);\n    var serverAuthenticationRequest = new ServerRequestParameters(newAuthority, this.clientId, scopes, responseType, this.getRedirectUri(), state); // get cached token\n\n    return this.getCachedToken(serverAuthenticationRequest, account);\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app\r\n   *\r\n   * @param endpoint\r\n   */\n\n\n  UserAgentApplication.prototype.getScopesForEndpoint = function (endpoint) {\n    // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\n    if (this.config.framework.unprotectedResources.length > 0) {\n      for (var i = 0; i < this.config.framework.unprotectedResources.length; i++) {\n        if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {\n          return null;\n        }\n      }\n    } // process all protected resources and send the matched one\n\n\n    if (this.config.framework.protectedResourceMap.size > 0) {\n      for (var _i = 0, _a = Array.from(this.config.framework.protectedResourceMap.keys()); _i < _a.length; _i++) {\n        var key = _a[_i]; // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1\n\n        if (endpoint.indexOf(key) > -1) {\n          return this.config.framework.protectedResourceMap.get(key);\n        }\n      }\n    } // default resource will be clientid if nothing specified\n    // App will use idtoken for calls to itself\n    // check if it's staring from http or https, needs to match with app host\n\n\n    if (endpoint.indexOf(\"http://\") > -1 || endpoint.indexOf(\"https://\") > -1) {\n      if (this.getHostFromUri(endpoint) === this.getHostFromUri(this.getRedirectUri())) {\n        return new Array(this.clientId);\n      }\n    } else {\n      // in angular level, the url for $http interceptor call could be relative url,\n      // if it's relative call, we'll treat it as app backend call.\n      return new Array(this.clientId);\n    } // if not the app's own backend or not a domain listed in the endpoints structure\n\n\n    return null;\n  };\n  /**\r\n   * Return boolean flag to developer to help inform if login is in progress\r\n   * @returns {boolean} true/false\r\n   */\n\n\n  UserAgentApplication.prototype.getLoginInProgress = function () {\n    var pendingCallback = this.cacheStorage.getItem(Constants.urlHash);\n\n    if (pendingCallback) {\n      return true;\n    }\n\n    return this.loginInProgress;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * @param loginInProgress\r\n   */\n\n\n  UserAgentApplication.prototype.setloginInProgress = function (loginInProgress) {\n    this.loginInProgress = loginInProgress;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * returns the status of acquireTokenInProgress\r\n   */\n\n\n  UserAgentApplication.prototype.getAcquireTokenInProgress = function () {\n    return this.acquireTokenInProgress;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * @param acquireTokenInProgress\r\n   */\n\n\n  UserAgentApplication.prototype.setAcquireTokenInProgress = function (acquireTokenInProgress) {\n    this.acquireTokenInProgress = acquireTokenInProgress;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * returns the logger handle\r\n   */\n\n\n  UserAgentApplication.prototype.getLogger = function () {\n    return this.config.system.logger;\n  }; //#endregion\n  //#region Getters and Setters\n\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n   * @returns {string} redirect URL\r\n   *\r\n   */\n\n\n  UserAgentApplication.prototype.getRedirectUri = function () {\n    if (typeof this.config.auth.redirectUri === \"function\") {\n      return this.config.auth.redirectUri();\n    }\n\n    return this.config.auth.redirectUri;\n  };\n  /**\r\n   * Use to get the post logout redirect uri configured in MSAL or null.\r\n   * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n   *\r\n   * @returns {string} post logout redirect URL\r\n   */\n\n\n  UserAgentApplication.prototype.getPostLogoutRedirectUri = function () {\n    if (typeof this.config.auth.postLogoutRedirectUri === \"function\") {\n      return this.config.auth.postLogoutRedirectUri();\n    }\n\n    return this.config.auth.postLogoutRedirectUri;\n  };\n  /**\r\n   * Use to get the current {@link Configuration} object in MSAL\r\n   *\r\n   * @returns {@link Configuration}\r\n   */\n\n\n  UserAgentApplication.prototype.getCurrentConfiguration = function () {\n    if (!this.config) {\n      throw ClientConfigurationError.createNoSetConfigurationError();\n    }\n\n    return this.config;\n  }; //#endregion\n  //#region String Util (Should be extracted to Utils.ts)\n\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * extract URI from the host\r\n   *\r\n   * @param {string} URI\r\n   * @returns {string} host from the URI\r\n   */\n\n\n  UserAgentApplication.prototype.getHostFromUri = function (uri) {\n    // remove http:// or https:// from uri\n    var extractedUri = String(uri).replace(/^(https?:)\\/\\//, \"\");\n    extractedUri = extractedUri.split(\"/\")[0];\n    return extractedUri;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * Utils function to create the Authentication\r\n   * @param {@link account} account object\r\n   * @param scopes\r\n   * @param silentCall\r\n   *\r\n   * @returns {string} token type: id_token or access_token\r\n   *\r\n   */\n\n\n  UserAgentApplication.prototype.getTokenType = function (accountObject, scopes, silentCall) {\n    // if account is passed and matches the account object/or set to getAccount() from cache\n    // if client-id is passed as scope, get id_token else token/id_token_token (in case no session exists)\n    var tokenType; // acquireTokenSilent\n\n    if (silentCall) {\n      if (Account.compareAccounts(accountObject, this.getAccount())) {\n        tokenType = scopes.indexOf(this.config.auth.clientId) > -1 ? ResponseTypes.id_token : ResponseTypes.token;\n      } else {\n        tokenType = scopes.indexOf(this.config.auth.clientId) > -1 ? ResponseTypes.id_token : ResponseTypes.id_token_token;\n      }\n\n      return tokenType;\n    } // all other cases\n    else {\n        if (!Account.compareAccounts(accountObject, this.getAccount())) {\n          tokenType = ResponseTypes.id_token_token;\n        } else {\n          tokenType = scopes.indexOf(this.clientId) > -1 ? ResponseTypes.id_token : ResponseTypes.token;\n        }\n\n        return tokenType;\n      }\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * Sets the cachekeys for and stores the account information in cache\r\n   * @param account\r\n   * @param state\r\n   * @hidden\r\n   */\n\n\n  UserAgentApplication.prototype.setAccountCache = function (account, state) {\n    // Cache acquireTokenAccountKey\n    var accountId = account ? this.getAccountId(account) : Constants.no_account;\n    var acquireTokenAccountKey = Storage.generateAcquireTokenAccountKey(accountId, state);\n    this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * Sets the cacheKey for and stores the authority information in cache\r\n   * @param state\r\n   * @param authority\r\n   * @hidden\r\n   */\n\n\n  UserAgentApplication.prototype.setAuthorityCache = function (state, authority) {\n    // Cache authorityKey\n    var authorityKey = Storage.generateAuthorityKey(state);\n    this.cacheStorage.setItem(authorityKey, UrlUtils.CanonicalizeUri(authority), this.inCookie);\n  };\n  /**\r\n   * Updates account, authority, and nonce in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   * @hidden\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.updateCacheEntries = function (serverAuthenticationRequest, account, loginStartPage) {\n    // Cache account and authority\n    if (loginStartPage) {\n      // Cache the state, nonce, and login request data\n      this.cacheStorage.setItem(Constants.loginRequest, loginStartPage, this.inCookie);\n      this.cacheStorage.setItem(Constants.loginError, \"\");\n      this.cacheStorage.setItem(Constants.stateLogin, serverAuthenticationRequest.state, this.inCookie);\n      this.cacheStorage.setItem(Constants.msalError, \"\");\n      this.cacheStorage.setItem(Constants.msalErrorDescription, \"\");\n    } else {\n      this.setAccountCache(account, serverAuthenticationRequest.state);\n    } // Cache authorityKey\n\n\n    this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority); // Cache nonce\n\n    this.cacheStorage.setItem(Constants.nonceIdToken, serverAuthenticationRequest.nonce, this.inCookie);\n  };\n  /**\r\n   * Returns the unique identifier for the logged in account\r\n   * @param account\r\n   * @hidden\r\n   * @ignore\r\n   */\n\n\n  UserAgentApplication.prototype.getAccountId = function (account) {\n    //return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;\n    var accountId;\n\n    if (!StringUtils.isEmpty(account.homeAccountIdentifier)) {\n      accountId = account.homeAccountIdentifier;\n    } else {\n      accountId = Constants.no_account;\n    }\n\n    return accountId;\n  };\n  /**\r\n   * @hidden\r\n   * @ignore\r\n   *\r\n   * Construct 'tokenRequest' from the available data in adalIdToken\r\n   * @param extraQueryParameters\r\n   * @hidden\r\n   */\n\n\n  UserAgentApplication.prototype.buildIDTokenRequest = function (request) {\n    var tokenRequest = {\n      scopes: [this.clientId],\n      authority: this.authority,\n      account: this.getAccount(),\n      extraQueryParameters: request.extraQueryParameters\n    };\n    return tokenRequest;\n  }; //#endregion\n\n\n  UserAgentApplication.prototype.getTelemetryManagerFromConfig = function (config, clientId) {\n    if (!config) {\n      // if unset\n      return null;\n    } // if set then validate\n\n\n    var applicationName = config.applicationName,\n        applicationVersion = config.applicationVersion,\n        telemetryEmitter = config.telemetryEmitter;\n\n    if (!applicationName || !applicationVersion || !telemetryEmitter) {\n      throw ClientConfigurationError.createTelemetryConfigError(config);\n    } // if valid then construct\n\n\n    var telemetryPlatform = {\n      sdk: \"msal.js\",\n      sdkVersion: libraryVersion(),\n      applicationName: applicationName,\n      applicationVersion: applicationVersion\n    };\n    var telemetryManagerConfig = {\n      platform: telemetryPlatform,\n      clientId: clientId\n    };\n    return new TelemetryManager(telemetryManagerConfig, telemetryEmitter);\n  };\n\n  tslib_1.__decorate([resolveTokenOnlyIfOutOfIframe], UserAgentApplication.prototype, \"acquireTokenSilent\", null);\n\n  return UserAgentApplication;\n}();\n\nexport { UserAgentApplication };","map":null,"metadata":{},"sourceType":"module"}