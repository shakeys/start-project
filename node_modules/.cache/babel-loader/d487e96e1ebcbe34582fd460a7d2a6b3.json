{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport TelemetryEvent from \"./TelemetryEvent\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\n\nvar DefaultEvent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DefaultEvent, _super); // TODO Platform Type\n\n\n  function DefaultEvent(platform, correlationId, clientId, eventCount) {\n    var _this = _super.call(this, prependEventNamePrefix(\"default_event\"), correlationId) || this;\n\n    _this.event[prependEventNamePrefix(\"client_id\")] = clientId;\n    _this.event[prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\n    _this.event[prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\n    _this.event[prependEventNamePrefix(\"application_name\")] = platform.applicationName;\n    _this.event[prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"ui_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"http_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix(\"cache_event\"), eventCount);\n    return _this; /// Device id?\n  }\n\n  DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\n    if (!eventCount[eventName]) {\n      return 0;\n    }\n\n    return eventCount[eventName];\n  };\n\n  return DefaultEvent;\n}(TelemetryEvent);\n\nexport default DefaultEvent;","map":null,"metadata":{},"sourceType":"module"}