{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Constants, CacheKeys } from \"./utils/Constants\";\nimport { AccessTokenCacheItem } from \"./AccessTokenCacheItem\";\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\n/**\r\n * @hidden\r\n */\n\nvar Storage =\n/** @class */\nfunction () {\n  function Storage(cacheLocation) {\n    if (Storage.instance) {\n      return Storage.instance;\n    }\n\n    this.cacheLocation = cacheLocation;\n    this.localStorageSupported = typeof window[this.cacheLocation] !== \"undefined\" && window[this.cacheLocation] != null;\n    this.sessionStorageSupported = typeof window[cacheLocation] !== \"undefined\" && window[cacheLocation] != null;\n    Storage.instance = this;\n\n    if (!this.localStorageSupported && !this.sessionStorageSupported) {\n      throw ClientConfigurationError.createNoStorageSupportedError();\n    }\n\n    return Storage.instance;\n  } // add value to storage\n\n\n  Storage.prototype.setItem = function (key, value, enableCookieStorage) {\n    if (window[this.cacheLocation]) {\n      window[this.cacheLocation].setItem(key, value);\n    }\n\n    if (enableCookieStorage) {\n      this.setItemCookie(key, value);\n    }\n  }; // get one item by key from storage\n\n\n  Storage.prototype.getItem = function (key, enableCookieStorage) {\n    if (enableCookieStorage && this.getItemCookie(key)) {\n      return this.getItemCookie(key);\n    }\n\n    if (window[this.cacheLocation]) {\n      return window[this.cacheLocation].getItem(key);\n    }\n\n    return null;\n  }; // remove value from storage\n\n\n  Storage.prototype.removeItem = function (key) {\n    if (window[this.cacheLocation]) {\n      return window[this.cacheLocation].removeItem(key);\n    }\n  }; // clear storage (remove all items from it)\n\n\n  Storage.prototype.clear = function () {\n    if (window[this.cacheLocation]) {\n      return window[this.cacheLocation].clear();\n    }\n  };\n\n  Storage.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {\n    var results = [];\n    var accessTokenCacheItem;\n    var storage = window[this.cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key)) {\n          if (key.match(clientId) && key.match(homeAccountIdentifier)) {\n            var value = this.getItem(key);\n\n            if (value) {\n              accessTokenCacheItem = new AccessTokenCacheItem(JSON.parse(key), JSON.parse(value));\n              results.push(accessTokenCacheItem);\n            }\n          }\n        }\n      }\n    }\n\n    return results;\n  };\n\n  Storage.prototype.removeAcquireTokenEntries = function (state) {\n    var storage = window[this.cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key)) {\n          if ((key.indexOf(CacheKeys.AUTHORITY) !== -1 || key.indexOf(CacheKeys.ACQUIRE_TOKEN_ACCOUNT) !== 1) && (!state || key.indexOf(state) !== -1)) {\n            var splitKey = key.split(Constants.resourceDelimiter);\n            var state_1 = void 0;\n\n            if (splitKey.length > 1) {\n              state_1 = splitKey[1];\n            }\n\n            if (state_1 && !this.tokenRenewalInProgress(state_1)) {\n              this.removeItem(key);\n              this.removeItem(Constants.renewStatus + state_1);\n              this.removeItem(Constants.stateLogin);\n              this.removeItem(Constants.stateAcquireToken);\n              this.setItemCookie(key, \"\", -1);\n            }\n          }\n        }\n      }\n    }\n\n    this.clearCookie();\n  };\n\n  Storage.prototype.tokenRenewalInProgress = function (stateValue) {\n    var storage = window[this.cacheLocation];\n    var renewStatus = storage[Constants.renewStatus + stateValue];\n    return !(!renewStatus || renewStatus !== Constants.tokenRenewStatusInProgress);\n  };\n\n  Storage.prototype.resetCacheItems = function () {\n    var storage = window[this.cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key)) {\n          if (key.indexOf(Constants.msal) !== -1) {\n            this.removeItem(key);\n          }\n        }\n      }\n\n      this.removeAcquireTokenEntries();\n    }\n  };\n\n  Storage.prototype.setItemCookie = function (cName, cValue, expires) {\n    var cookieStr = cName + \"=\" + cValue + \";\";\n\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n\n    document.cookie = cookieStr;\n  };\n\n  Storage.prototype.getItemCookie = function (cName) {\n    var name = cName + \"=\";\n    var ca = document.cookie.split(\";\");\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) === \" \") {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  };\n\n  Storage.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);\n    return expr.toUTCString();\n  };\n\n  Storage.prototype.clearCookie = function () {\n    this.setItemCookie(Constants.nonceIdToken, \"\", -1);\n    this.setItemCookie(Constants.stateLogin, \"\", -1);\n    this.setItemCookie(Constants.loginRequest, \"\", -1);\n    this.setItemCookie(Constants.stateAcquireToken, \"\", -1);\n  };\n  /**\r\n   * Create acquireTokenAccountKey to cache account object\r\n   * @param accountId\r\n   * @param state\r\n   */\n\n\n  Storage.generateAcquireTokenAccountKey = function (accountId, state) {\n    return CacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants.resourceDelimiter + (\"\" + accountId) + Constants.resourceDelimiter + (\"\" + state);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n\n\n  Storage.generateAuthorityKey = function (state) {\n    return CacheKeys.AUTHORITY + Constants.resourceDelimiter + (\"\" + state);\n  };\n\n  return Storage;\n}();\n\nexport { Storage };","map":null,"metadata":{},"sourceType":"module"}