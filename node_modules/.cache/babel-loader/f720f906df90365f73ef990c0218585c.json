{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\r\n * @class\r\n * Class for PageIterator\r\n */\n\n\nexport class PageIterator {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates new instance for PageIterator\r\n   * @param {Client} client - The graph client instance\r\n   * @param {PageCollection} pageCollection - The page collection object\r\n   * @param {PageIteratorCallback} callBack - The callback function\r\n   * @returns An instance of a PageIterator\r\n   */\n  constructor(client, pageCollection, callback) {\n    this.client = client;\n    this.collection = pageCollection.value;\n    this.nextLink = pageCollection[\"@odata.nextLink\"];\n    this.deltaLink = pageCollection[\"@odata.deltaLink\"];\n    this.callback = callback;\n    this.complete = false;\n  }\n  /**\r\n   * @private\r\n   * Iterates over a collection by enqueuing entries one by one and kicking the callback with the enqueued entry\r\n   * @returns A boolean indicating the continue flag to process next page\r\n   */\n\n\n  iterationHelper() {\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    let advance = true;\n\n    while (advance && this.collection.length !== 0) {\n      const item = this.collection.shift();\n      advance = this.callback(item);\n    }\n\n    return advance;\n  }\n  /**\r\n   * @private\r\n   * @async\r\n   * Helper to make a get request to fetch next page with nextLink url and update the page iterator instance with the returned response\r\n   * @returns A promise that resolves to a response data with next page collection\r\n   */\n\n\n  fetchAndUpdateNextPageData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const response = yield this.client.api(this.nextLink).get();\n        this.collection = response.value;\n        this.nextLink = response[\"@odata.nextLink\"];\n        this.deltaLink = response[\"@odata.deltaLink\"];\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * Getter to get the deltaLink in the current response\r\n   * @returns A deltaLink which is being used to make delta requests in future\r\n   */\n\n\n  getDeltaLink() {\n    return this.deltaLink;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Iterates over the collection and kicks callback for each item on iteration. Fetches next set of data through nextLink and iterates over again\r\n   * This happens until the nextLink is drained out or the user responds with a red flag to continue from callback\r\n   * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy.\r\n   */\n\n\n  iterate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let advance = this.iterationHelper();\n\n        while (advance) {\n          if (this.nextLink !== undefined) {\n            yield this.fetchAndUpdateNextPageData();\n            advance = this.iterationHelper();\n          } else {\n            advance = false;\n          }\n        }\n\n        if (this.nextLink === undefined && this.collection.length === 0) {\n          this.complete = true;\n        }\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To resume the iteration\r\n   * Note: This internally calls the iterate method, It's just for more readability.\r\n   * @returns A Promise that resolves to nothing on completion and throws error incase of any discrepancy\r\n   */\n\n\n  resume() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.iterate();\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * To get the completeness status of the iterator\r\n   * @returns Boolean indicating the completeness\r\n   */\n\n\n  isComplete() {\n    return this.complete;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}