{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { GraphErrorHandler } from \"./GraphErrorHandler\";\nimport { oDataQueryNames, serializeContent, urlJoin } from \"./GraphRequestUtil\";\nimport { GraphResponseHandler } from \"./GraphResponseHandler\";\nimport { MiddlewareControl } from \"./middleware/MiddlewareControl\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { ResponseType } from \"./ResponseType\";\n/**\r\n * @class\r\n * A Class representing GraphRequest\r\n */\n\nexport class GraphRequest {\n  /* tslint:enable: variable-name */\n\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of GraphRequest\r\n   * @param {HTTPClient} httpClient - The HTTPClient instance\r\n   * @param {ClientOptions} config - The options for making request\r\n   * @param {string} path - A path string\r\n   */\n  constructor(httpClient, config, path) {\n    /**\r\n     * @private\r\n     * Parses the path string and creates URLComponents out of it\r\n     * @param {string} path - The request path string\r\n     * @returns Nothing\r\n     */\n    this.parsePath = path => {\n      // Strips out the base of the url if they passed in\n      if (path.indexOf(\"https://\") !== -1) {\n        path = path.replace(\"https://\", \"\"); // Find where the host ends\n\n        const endOfHostStrPos = path.indexOf(\"/\");\n\n        if (endOfHostStrPos !== -1) {\n          // Parse out the host\n          this.urlComponents.host = \"https://\" + path.substring(0, endOfHostStrPos); // Strip the host from path\n\n          path = path.substring(endOfHostStrPos + 1, path.length);\n        } // Remove the following version\n\n\n        const endOfVersionStrPos = path.indexOf(\"/\");\n\n        if (endOfVersionStrPos !== -1) {\n          // Parse out the version\n          this.urlComponents.version = path.substring(0, endOfVersionStrPos); // Strip version from path\n\n          path = path.substring(endOfVersionStrPos + 1, path.length);\n        }\n      } // Strip out any leading \"/\"\n\n\n      if (path.charAt(0) === \"/\") {\n        path = path.substr(1);\n      }\n\n      const queryStrPos = path.indexOf(\"?\");\n\n      if (queryStrPos === -1) {\n        // No query string\n        this.urlComponents.path = path;\n      } else {\n        this.urlComponents.path = path.substr(0, queryStrPos); // Capture query string into oDataQueryParams and otherURLQueryParams\n\n        const queryParams = path.substring(queryStrPos + 1, path.length).split(\"&\");\n\n        for (const queryParam of queryParams) {\n          const qParams = queryParam.split(\"=\");\n          const key = qParams[0];\n          const value = qParams[1];\n\n          if (oDataQueryNames.indexOf(key) !== -1) {\n            this.urlComponents.oDataQueryParams[key] = value;\n          } else {\n            this.urlComponents.otherURLQueryParams[key] = value;\n          }\n        }\n      }\n    };\n\n    this.httpClient = httpClient;\n    this.config = config;\n    this.urlComponents = {\n      host: this.config.baseUrl,\n      version: this.config.defaultVersion,\n      oDataQueryParams: {},\n      otherURLQueryParams: {}\n    };\n    this._headers = {};\n    this._options = {};\n    this._middlewareOptions = [];\n    this.parsePath(path);\n  }\n  /**\r\n   * @private\r\n   * Adds the query parameter as comma separated values\r\n   * @param {string} propertyName - The name of a property\r\n   * @param {string|string[]} propertyValue - The vale of a property\r\n   * @param {IArguments} additionalProperties - The additional properties\r\n   * @returns Nothing\r\n   */\n\n\n  addCsvQueryParameter(propertyName, propertyValue, additionalProperties) {\n    // If there are already $propertyName value there, append a \",\"\n    this.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\n    let allValues = [];\n\n    if (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\n      allValues = Array.prototype.slice.call(additionalProperties);\n    } else if (typeof propertyValue === \"string\") {\n      allValues.push(propertyValue);\n    } else {\n      allValues = allValues.concat(propertyValue);\n    }\n\n    this.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\n  }\n  /**\r\n   * @private\r\n   * Builds the full url from the URLComponents to make a request\r\n   * @returns The URL string that is qualified to make a request to graph endpoint\r\n   */\n\n\n  buildFullUrl() {\n    const url = urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\n\n    if (this.config.debugLogging) {\n      console.log(url); // tslint:disable-line: no-console\n    }\n\n    return url;\n  }\n  /**\r\n   * @private\r\n   * Builds the query string from the URLComponents\r\n   * @returns The Constructed query string\r\n   */\n\n\n  createQueryString() {\n    // Combining query params from oDataQueryParams and otherURLQueryParams\n    const urlComponents = this.urlComponents;\n    const query = [];\n\n    if (Object.keys(urlComponents.oDataQueryParams).length !== 0) {\n      for (const property in urlComponents.oDataQueryParams) {\n        if (urlComponents.oDataQueryParams.hasOwnProperty(property)) {\n          query.push(property + \"=\" + urlComponents.oDataQueryParams[property]);\n        }\n      }\n    }\n\n    if (Object.keys(urlComponents.otherURLQueryParams).length !== 0) {\n      for (const property in urlComponents.otherURLQueryParams) {\n        if (urlComponents.otherURLQueryParams.hasOwnProperty(property)) {\n          query.push(property + \"=\" + urlComponents.otherURLQueryParams[property]);\n        }\n      }\n    }\n\n    return query.length > 0 ? \"?\" + query.join(\"&\") : \"\";\n  }\n  /**\r\n   * @private\r\n   * Updates the custom headers and options for a request\r\n   * @param {FetchOptions} options - The request options object\r\n   * @returns Nothing\r\n   */\n\n\n  updateRequestOptions(options) {\n    const optionsHeaders = Object.assign({}, options.headers);\n\n    if (this.config.fetchOptions !== undefined) {\n      const fetchOptions = Object.assign({}, this.config.fetchOptions);\n      Object.assign(options, fetchOptions);\n\n      if (typeof this.config.fetchOptions.headers !== undefined) {\n        options.headers = Object.assign({}, this.config.fetchOptions.headers);\n      }\n    }\n\n    Object.assign(options, this._options);\n\n    if (options.headers !== undefined) {\n      Object.assign(optionsHeaders, options.headers);\n    }\n\n    Object.assign(optionsHeaders, this._headers);\n    options.headers = optionsHeaders;\n  }\n  /**\r\n   * @private\r\n   * @async\r\n   * Adds the custom headers and options to the request and makes the HTTPClient send request call\r\n   * @param {RequestInfo} request - The request url string or the Request object value\r\n   * @param {FetchOptions} options - The options to make a request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the response content\r\n   */\n\n\n  send(request, options, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let rawResponse;\n      const middlewareControl = new MiddlewareControl(this._middlewareOptions);\n      this.updateRequestOptions(options);\n\n      try {\n        const context = yield this.httpClient.sendRequest({\n          request,\n          options,\n          middlewareControl\n        });\n        rawResponse = context.response;\n        const response = yield GraphResponseHandler.getResponse(rawResponse, this._responseType, callback);\n        return response;\n      } catch (error) {\n        let statusCode;\n\n        if (typeof rawResponse !== \"undefined\") {\n          statusCode = rawResponse.status;\n        }\n\n        const gError = yield GraphErrorHandler.getError(error, statusCode, callback);\n        throw gError;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * Sets the custom header for a request\r\n   * @param {string} headerKey - A header key\r\n   * @param {string} headerValue - A header value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  header(headerKey, headerValue) {\n    this._headers[headerKey] = headerValue;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the custom headers for a request\r\n   * @param {KeyValuePairObjectStringNumber} headers - The headers key value pair object\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  headers(headers) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        this._headers[key] = headers[key];\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the option for making a request\r\n   * @param {string} key - The key value\r\n   * @param {any} value - The value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  option(key, value) {\n    this._options[key] = value;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the options for making a request\r\n   * @param {{ [key: string]: any }} options - The options key value pair\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  options(options) {\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        this._options[key] = options[key];\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the middleware options for a request\r\n   * @param {MiddlewareOptions[]} options - The array of middleware options\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  middlewareOptions(options) {\n    this._middlewareOptions = options;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the api endpoint version for a request\r\n   * @param {string} version - The version value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  version(version) {\n    this.urlComponents.version = version;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the api endpoint version for a request\r\n   * @param {ResponseType} responseType - The response type value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  responseType(responseType) {\n    this._responseType = responseType;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for select OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n  /*\r\n   * Accepts .select(\"displayName,birthday\")\r\n   *     and .select([\"displayName\", \"birthday\"])\r\n   *     and .select(\"displayName\", \"birthday\")\r\n   *\r\n   */\n\n\n  select(properties) {\n    this.addCsvQueryParameter(\"$select\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for expand OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  expand(properties) {\n    this.addCsvQueryParameter(\"$expand\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for orderby OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  orderby(properties) {\n    this.addCsvQueryParameter(\"$orderby\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add query string for filter OData Query param\r\n   * @param {string} filterStr - The filter query string\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  filter(filterStr) {\n    this.urlComponents.oDataQueryParams.$filter = filterStr;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add criterion for search OData Query param\r\n   * @param {string} searchStr - The search criterion string\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  search(searchStr) {\n    this.urlComponents.oDataQueryParams.$search = searchStr;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add number for top OData Query param\r\n   * @param {number} n - The number value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  top(n) {\n    this.urlComponents.oDataQueryParams.$top = n;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add number for skip OData Query param\r\n   * @param {number} n - The number value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  skip(n) {\n    this.urlComponents.oDataQueryParams.$skip = n;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add token string for skipToken OData Query param\r\n   * @param {string} token - The token value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  skipToken(token) {\n    this.urlComponents.oDataQueryParams.$skipToken = token;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add boolean for count OData Query param\r\n   * @param {boolean} isCount - The count boolean\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  count(isCount) {\n    this.urlComponents.oDataQueryParams.$count = isCount.toString();\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Appends query string to the urlComponent\r\n   * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  query(queryDictionaryOrString) {\n    const otherURLQueryParams = this.urlComponents.otherURLQueryParams;\n\n    if (typeof queryDictionaryOrString === \"string\") {\n      const querySplit = queryDictionaryOrString.split(\"=\");\n      const queryKey = querySplit[0];\n      const queryValue = querySplit[1];\n      otherURLQueryParams[queryKey] = queryValue;\n    } else {\n      for (const key in queryDictionaryOrString) {\n        if (queryDictionaryOrString.hasOwnProperty(key)) {\n          otherURLQueryParams[key] = queryDictionaryOrString[key];\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the get response\r\n   */\n\n\n  get(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with POST method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the post response\r\n   */\n\n\n  post(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.POST,\n        body: serializeContent(content),\n        headers: content.constructor !== undefined && content.constructor.name === \"FormData\" ? {} : {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for Post request call\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the post response\r\n   */\n\n\n  create(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.post(content, callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with PUT method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the put response\r\n   */\n\n\n  put(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.PUT,\n        body: serializeContent(content),\n        headers: {\n          \"Content-Type\": \"application/octet-stream\"\n        }\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with PATCH method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the patch response\r\n   */\n\n\n  patch(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.PATCH,\n        body: serializeContent(content),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for PATCH request\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the patch response\r\n   */\n\n\n  update(content, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.patch(content, callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with DELETE method\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the delete response\r\n   */\n\n\n  delete(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.DELETE\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for delete request call\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the delete response\r\n   */\n\n\n  del(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.delete(callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method to read response as a stream.\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the getStream response\r\n   */\n\n\n  getStream(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n      this.responseType(ResponseType.STREAM);\n\n      try {\n        const stream = yield this.send(url, options, callback);\n        return stream;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method to read response as a stream.\r\n   * @param {any} stream - The stream instance\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the putStream response\r\n   */\n\n\n  putStream(stream, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.PUT,\n        headers: {\n          \"Content-Type\": \"application/octet-stream\"\n        },\n        body: stream\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}