{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @module Client\r\n */\nimport { GRAPH_API_VERSION, GRAPH_BASE_URL } from \"./Constants\";\nimport { CustomAuthenticationProvider } from \"./CustomAuthenticationProvider\";\nimport { GraphRequest } from \"./GraphRequest\";\nimport { HTTPClient } from \"./HTTPClient\";\nimport { HTTPClientFactory } from \"./HTTPClientFactory\";\nimport { validatePolyFilling } from \"./ValidatePolyFilling\";\nexport class Client {\n  /**\r\n   * @private\r\n   * @constructor\r\n   * Creates an instance of Client\r\n   * @param {ClientOptions} clientOptions - The options to instantiate the client object\r\n   */\n  constructor(clientOptions) {\n    /**\r\n     * @private\r\n     * A member which stores the Client instance options\r\n     */\n    this.config = {\n      baseUrl: GRAPH_BASE_URL,\n      debugLogging: false,\n      defaultVersion: GRAPH_API_VERSION\n    };\n\n    try {\n      validatePolyFilling();\n    } catch (error) {\n      throw error;\n    }\n\n    for (const key in clientOptions) {\n      if (clientOptions.hasOwnProperty(key)) {\n        this.config[key] = clientOptions[key];\n      }\n    }\n\n    let httpClient;\n\n    if (clientOptions.authProvider !== undefined && clientOptions.middleware !== undefined) {\n      const error = new Error();\n      error.name = \"AmbiguityInInitialization\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain not both\";\n      throw error;\n    } else if (clientOptions.authProvider !== undefined) {\n      httpClient = HTTPClientFactory.createWithAuthenticationProvider(clientOptions.authProvider);\n    } else if (clientOptions.middleware !== undefined) {\n      httpClient = new HTTPClient(clientOptions.middleware);\n    } else {\n      const error = new Error();\n      error.name = \"InvalidMiddlewareChain\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain\";\n      throw error;\n    }\n\n    this.httpClient = httpClient;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To create a client instance with options and initializes the default middleware chain\r\n   * @param {Options} options - The options for client instance\r\n   * @returns The Client instance\r\n   */\n\n\n  static init(options) {\n    const clientOptions = {};\n\n    for (const i in options) {\n      if (options.hasOwnProperty(i)) {\n        clientOptions[i] = i === \"authProvider\" ? new CustomAuthenticationProvider(options[i]) : options[i];\n      }\n    }\n\n    return Client.initWithMiddleware(clientOptions);\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To create a client instance with the Client Options\r\n   * @param {ClientOptions} clientOptions - The options object for initializing the client\r\n   * @returns The Client instance\r\n   */\n\n\n  static initWithMiddleware(clientOptions) {\n    try {\n      return new Client(clientOptions);\n    } catch (error) {\n      throw error;\n    }\n  }\n  /**\r\n   * @public\r\n   * Entry point to make requests\r\n   * @param {string} path - The path string value\r\n   * @returns The graph request instance\r\n   */\n\n\n  api(path) {\n    return new GraphRequest(this.httpClient, this.config, path);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}