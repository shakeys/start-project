{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { StringUtils } from \"./utils/StringUtils\";\nimport { libraryVersion } from \"./utils/Constants\";\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n})(LogLevel || (LogLevel = {}));\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger(localCallback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\r\n     * @hidden\r\n     */\n\n\n    this.level = LogLevel.Info;\n    var _a = options.correlationId,\n        correlationId = _a === void 0 ? \"\" : _a,\n        _b = options.level,\n        level = _b === void 0 ? LogLevel.Info : _b,\n        _c = options.piiLoggingEnabled,\n        piiLoggingEnabled = _c === void 0 ? false : _c;\n    this.localCallback = localCallback;\n    this.correlationId = correlationId;\n    this.level = level;\n    this.piiLoggingEnabled = piiLoggingEnabled;\n  }\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.logMessage = function (logLevel, logMessage, containsPii) {\n    if (logLevel > this.level || !this.piiLoggingEnabled && containsPii) {\n      return;\n    }\n\n    var timestamp = new Date().toUTCString();\n    var log;\n\n    if (!StringUtils.isEmpty(this.correlationId)) {\n      log = timestamp + \":\" + this.correlationId + \"-\" + libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\n    } else {\n      log = timestamp + \":\" + libraryVersion() + \"-\" + LogLevel[logLevel] + \" \" + logMessage;\n    }\n\n    this.executeCallback(logLevel, log, containsPii);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.error = function (message) {\n    this.logMessage(LogLevel.Error, message, false);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.errorPii = function (message) {\n    this.logMessage(LogLevel.Error, message, true);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.warning = function (message) {\n    this.logMessage(LogLevel.Warning, message, false);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.warningPii = function (message) {\n    this.logMessage(LogLevel.Warning, message, true);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.info = function (message) {\n    this.logMessage(LogLevel.Info, message, false);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.infoPii = function (message) {\n    this.logMessage(LogLevel.Info, message, true);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.verbose = function (message) {\n    this.logMessage(LogLevel.Verbose, message, false);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Logger.prototype.verbosePii = function (message) {\n    this.logMessage(LogLevel.Verbose, message, true);\n  };\n\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled;\n  };\n\n  return Logger;\n}();\n\nexport { Logger };","map":null,"metadata":{},"sourceType":"module"}