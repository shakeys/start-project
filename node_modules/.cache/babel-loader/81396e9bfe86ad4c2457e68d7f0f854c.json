{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\r\n * @hidden\r\n */\nvar CryptoUtils =\n/** @class */\nfunction () {\n  function CryptoUtils() {}\n  /**\r\n   * Creates a new random GUID - used to populate state?\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoUtils.createNewGuid = function () {\n    // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n    // pseudo-random numbers.\n    // The algorithm is as follows:\n    //     Set the two most significant bits (bits 6 and 7) of the\n    //        clock_seq_hi_and_reserved to zero and one, respectively.\n    //     Set the four most significant bits (bits 12 through 15) of the\n    //        time_hi_and_version field to the 4-bit version number from\n    //        Section 4.1.3. Version4\n    //     Set all the other bits to randomly (or pseudo-randomly) chosen\n    //     values.\n    // UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n    // time-low               = 4hexOctet\n    // time-mid               = 2hexOctet\n    // time-high-and-version  = 2hexOctet\n    // clock-seq-and-reserved = hexOctet:\n    // clock-seq-low          = hexOctet\n    // node                   = 6hexOctet\n    // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n    // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n    // y values are 8, 9, A, B\n    var cryptoObj = window.crypto; // for IE 11\n\n    if (cryptoObj && cryptoObj.getRandomValues) {\n      var buffer = new Uint8Array(16);\n      cryptoObj.getRandomValues(buffer); //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n\n      buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.\n\n      buffer[6] &= 0x4f; //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n\n      buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.\n\n      buffer[8] &= 0xbf; //buffer[8] & 10111111 will set the 6 bit to 0.\n\n      return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1]) + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3]) + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5]) + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7]) + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9]) + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11]) + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13]) + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\n    } else {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = \"\";\n\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\n          r |= 0x8; // set pos 3 to 1 as 1???\n\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n\n      return guidResponse;\n    }\n  };\n  /**\r\n   * Decimal to Hex\r\n   *\r\n   * @param num\r\n   */\n\n\n  CryptoUtils.decimalToHex = function (num) {\n    var hex = num.toString(16);\n\n    while (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n\n    return hex;\n  }; // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\n\n  /**\r\n   * encoding string to base64 - platform specific check\r\n   *\r\n   * @param input\r\n   */\n\n\n  CryptoUtils.base64Encode = function (input) {\n    return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\n      return String.fromCharCode(Number(\"0x\" + p1));\n    }));\n  };\n  /**\r\n   * decoding base64 token - platform specific check\r\n   *\r\n   * @param base64IdToken\r\n   */\n\n\n  CryptoUtils.base64Decode = function (input) {\n    return decodeURIComponent(atob(input).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n  };\n  /**\r\n   * deserialize a string\r\n   *\r\n   * @param query\r\n   */\n\n\n  CryptoUtils.deserialize = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(pl, \" \"));\n    };\n\n    var obj = {};\n    match = search.exec(query);\n\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n\n    return obj;\n  };\n\n  return CryptoUtils;\n}();\n\nexport { CryptoUtils };","map":null,"metadata":{},"sourceType":"module"}