{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\r\n * @module GraphErrorHandler\r\n */\n\n\nimport { GraphError } from \"./GraphError\";\n/**\r\n * @class\r\n * Class for GraphErrorHandler\r\n */\n\nexport class GraphErrorHandler {\n  /**\r\n   * @private\r\n   * @static\r\n   * Populates the GraphError instance with Error instance values\r\n   * @param {Error} error - The error returned by graph service or some native error\r\n   * @param {number} [statusCode] - The status code of the response\r\n   * @returns The GraphError instance\r\n   */\n  static constructError(error, statusCode) {\n    const gError = new GraphError(statusCode);\n\n    if (error.name !== undefined) {\n      gError.code = error.name;\n    }\n\n    gError.body = error.toString();\n    gError.message = error.message;\n    gError.date = new Date();\n    return gError;\n  }\n  /**\r\n   * @private\r\n   * @static\r\n   * @async\r\n   * Populates the GraphError instance from the Error returned by graph service\r\n   * @param {any} error - The error returned by graph service or some native error\r\n   * @param {number} statusCode - The status code of the response\r\n   * @returns A promise that resolves to GraphError instance\r\n   *\r\n   * Example error for https://graph.microsoft.com/v1.0/me/events?$top=3&$search=foo\r\n   * {\r\n   *      \"error\": {\r\n   *          \"code\": \"SearchEvents\",\r\n   *          \"message\": \"The parameter $search is not currently supported on the Events resource.\",\r\n   *          \"innerError\": {\r\n   *              \"request-id\": \"b31c83fd-944c-4663-aa50-5d9ceb367e19\",\r\n   *              \"date\": \"2016-11-17T18:37:45\"\r\n   *          }\r\n   *      }\r\n   *  }\r\n   */\n\n\n  static constructErrorFromResponse(error, statusCode) {\n    error = error.error;\n    const gError = new GraphError(statusCode);\n    gError.code = error.code;\n    gError.message = error.message;\n\n    if (error.innerError !== undefined) {\n      gError.requestId = error.innerError[\"request-id\"];\n      gError.date = new Date(error.innerError.date);\n    }\n\n    try {\n      gError.body = JSON.stringify(error);\n    } catch (error) {// tslint:disable-line: no-empty\n    }\n\n    return gError;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * To get the GraphError object\r\n   * @param {any} [error = null] - The error returned by graph service or some native error\r\n   * @param {number} [statusCode = -1] - The status code of the response\r\n   * @param {GraphRequestCallback} [callback] - The graph request callback function\r\n   * @returns A promise that resolves to GraphError instance\r\n   */\n\n\n  static getError(error = null, statusCode = -1, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let gError;\n\n      if (error && error.error) {\n        gError = GraphErrorHandler.constructErrorFromResponse(error, statusCode);\n      } else if (error && error.constructor.name === \"Error\") {\n        gError = GraphErrorHandler.constructError(error, statusCode);\n      } else {\n        gError = new GraphError(statusCode);\n      }\n\n      if (typeof callback === \"function\") {\n        callback(gError, null);\n      } else {\n        return gError;\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}