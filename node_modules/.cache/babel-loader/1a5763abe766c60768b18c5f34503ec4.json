{"ast":null,"code":"\"use strict\"; // tslint:disable: no-console\n//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n\n  Logger.VERBOSE = function (message) {\n    var optionalParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      optionalParams[_i - 1] = arguments[_i];\n    }\n\n    console.log.apply(console, ['[VERBOSE] ' + message].concat(optionalParams));\n  };\n\n  Logger.INFO = function (message) {\n    var optionalParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      optionalParams[_i - 1] = arguments[_i];\n    }\n\n    console.info.apply(console, ['[INFO] ' + message].concat(optionalParams));\n  };\n\n  Logger.WARN = function (message) {\n    var optionalParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      optionalParams[_i - 1] = arguments[_i];\n    }\n\n    console.warn.apply(console, ['[WARN] ' + message].concat(optionalParams));\n  };\n\n  Logger.ERROR = function (message) {\n    var optionalParams = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      optionalParams[_i - 1] = arguments[_i];\n    }\n\n    console.error.apply(console, ['[ERROR] ' + message].concat(optionalParams));\n  };\n\n  return Logger;\n}();\n\nexports.Logger = Logger;","map":null,"metadata":{},"sourceType":"script"}