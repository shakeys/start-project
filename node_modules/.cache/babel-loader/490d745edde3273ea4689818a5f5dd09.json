{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { StringUtils } from './StringUtils';\n/**\r\n * @hidden\r\n */\n\nvar TokenUtils =\n/** @class */\nfunction () {\n  function TokenUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param jwtToken\r\n   */\n\n\n  TokenUtils.decodeJwt = function (jwtToken) {\n    if (StringUtils.isEmpty(jwtToken)) {\n      return null;\n    }\n\n    var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = idTokenPartsRegex.exec(jwtToken);\n\n    if (!matches || matches.length < 4) {\n      //this._requestContext.logger.warn(\"The returned id_token is not parseable.\");\n      return null;\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Extract IdToken by decoding the RAWIdToken\r\n   *\r\n   * @param encodedIdToken\r\n   */\n\n\n  TokenUtils.extractIdToken = function (encodedIdToken) {\n    // id token will be decoded to get the username\n    var decodedToken = this.decodeJwt(encodedIdToken);\n\n    if (!decodedToken) {\n      return null;\n    }\n\n    try {\n      var base64IdToken = decodedToken.JWSPayload;\n      var base64Decoded = CryptoUtils.base64Decode(base64IdToken);\n\n      if (!base64Decoded) {\n        //this._requestContext.logger.info(\"The returned id_token could not be base64 url safe decoded.\");\n        return null;\n      } // ECMA script has JSON built-in support\n\n\n      return JSON.parse(base64Decoded);\n    } catch (err) {//this._requestContext.logger.error(\"The returned id_token could not be decoded\" + err);\n    }\n\n    return null;\n  };\n\n  return TokenUtils;\n}();\n\nexport { TokenUtils };","map":null,"metadata":{},"sourceType":"module"}