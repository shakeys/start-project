{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { setRequestHeader } from \"./MiddlewareUtil\";\nimport { AuthenticationHandlerOptions } from \"./options/AuthenticationHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class representing AuthenticationHandler\r\n */\n\nexport class AuthenticationHandler {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of AuthenticationHandler\r\n   * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler\r\n   */\n  constructor(authenticationProvider) {\n    this.authenticationProvider = authenticationProvider;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The context object of the request\r\n   * @returns A Promise that resolves to nothing\r\n   */\n\n\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let options;\n\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions.name);\n        }\n\n        let authenticationProvider;\n        let authenticationProviderOptions;\n\n        if (typeof options !== \"undefined\") {\n          authenticationProvider = options.authenticationProvider;\n          authenticationProviderOptions = options.authenticationProviderOptions;\n        }\n\n        if (typeof authenticationProvider === \"undefined\") {\n          authenticationProvider = this.authenticationProvider;\n        }\n\n        const token = yield authenticationProvider.getAccessToken(authenticationProviderOptions);\n        const bearerKey = \"Bearer \".concat(token);\n        setRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);\n        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);\n        return yield this.nextMiddleware.execute(context);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * To set the next middleware in the chain\r\n   * @param {Middleware} next - The middleware instance\r\n   * @returns Nothing\r\n   */\n\n\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n\n}\n/**\r\n * @private\r\n * A member representing the authorization header name\r\n */\n\nAuthenticationHandler.AUTHORIZATION_HEADER = \"Authorization\";","map":null,"metadata":{},"sourceType":"module"}