{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\r\n * @class\r\n * Class representing HTTPClient\r\n */\n\n\nexport class HTTPClient {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of a HTTPClient\r\n   * @param {Middleware} middleware - The first middleware of the middleware chain\r\n   */\n  constructor(middleware) {\n    this.middleware = middleware;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To send the request through the middleware chain\r\n   * @param {Context} context - The context of a request\r\n   * @returns A promise that resolves to the Context\r\n   */\n\n\n  sendRequest(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!(context.request instanceof Request) && context.options === undefined) {\n          const error = new Error();\n          error.name = \"InvalidRequestOptions\";\n          error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\n          throw error;\n        }\n\n        yield this.middleware.execute(context);\n        return context;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}