{"ast":null,"code":"import { B2cAuthority } from \"../B2cAuthority\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nexport var scrubTenantFromUri = function (uri) {\n  var url = UrlUtils.GetUrlComponents(uri); // validate trusted host\n\n  if (!AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\n    // Should this return null or what was passed?\n    return null;\n  }\n\n  var pathParams = url.PathSegments;\n\n  if (pathParams && pathParams.length >= 2) {\n    var tenantPosition = pathParams[1] === B2cAuthority.B2C_PREFIX ? 2 : 1;\n\n    if (tenantPosition < pathParams.length) {\n      pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n    }\n  }\n\n  return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function (valueToHash) {\n  // TODO sha256 this\n  // Current test runner is being funny with node libs that are webpacked anyway\n  // need a different solution\n  return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function (suffix) {\n  return \"\" + EVENT_NAME_PREFIX + (suffix || \"\");\n};","map":null,"metadata":{},"sourceType":"module"}