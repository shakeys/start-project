{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { TokenUtils } from \"./utils/TokenUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\r\n * @hidden\r\n */\n\nvar IdToken =\n/** @class */\nfunction () {\n  /* tslint:disable:no-string-literal */\n  function IdToken(rawIdToken) {\n    if (StringUtils.isEmpty(rawIdToken)) {\n      throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\n    }\n\n    try {\n      this.rawIdToken = rawIdToken;\n      this.claims = TokenUtils.extractIdToken(rawIdToken);\n\n      if (this.claims) {\n        if (this.claims.hasOwnProperty(\"iss\")) {\n          this.issuer = this.claims[\"iss\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"oid\")) {\n          this.objectId = this.claims[\"oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sub\")) {\n          this.subject = this.claims[\"sub\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"tid\")) {\n          this.tenantId = this.claims[\"tid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"ver\")) {\n          this.version = this.claims[\"ver\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"preferred_username\")) {\n          this.preferredName = this.claims[\"preferred_username\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"name\")) {\n          this.name = this.claims[\"name\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"nonce\")) {\n          this.nonce = this.claims[\"nonce\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"exp\")) {\n          this.expiration = this.claims[\"exp\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"home_oid\")) {\n          this.homeObjectId = this.claims[\"home_oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sid\")) {\n          this.sid = this.claims[\"sid\"];\n        }\n        /* tslint:enable:no-string-literal */\n\n      }\n    } catch (e) {\n      // TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\n      // Need to add better error handling here to account for being unable to decode jwts.\n      throw ClientAuthError.createIdTokenParsingError(e);\n    }\n  }\n\n  return IdToken;\n}();\n\nexport { IdToken };","map":null,"metadata":{},"sourceType":"module"}