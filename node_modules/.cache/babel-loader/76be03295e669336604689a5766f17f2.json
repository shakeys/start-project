{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { LargeFileUploadTask } from \"./LargeFileUploadTask\";\nimport { getValidRangeSize } from \"./OneDriveLargeFileUploadTaskUtil\";\n/**\r\n * @class\r\n * Class representing OneDriveLargeFileUploadTask\r\n */\n\nexport class OneDriveLargeFileUploadTask extends LargeFileUploadTask {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Constructs a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\r\n   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\r\n   * @param {LargeFileUploadTaskOptions} options - The upload task options\r\n   * @returns An instance of OneDriveLargeFileUploadTask\r\n   */\n  constructor(client, file, uploadSession, options) {\n    super(client, file, uploadSession, options);\n  }\n  /**\r\n   * @private\r\n   * @static\r\n   * Constructs the create session url for Onedrive\r\n   * @param {string} fileName - The name of the file\r\n   * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\r\n   * @returns The constructed create session url\r\n   */\n\n\n  static constructCreateSessionUrl(fileName, path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH) {\n    fileName = fileName.trim();\n    path = path.trim();\n\n    if (path === \"\") {\n      path = \"/\";\n    }\n\n    if (path[0] !== \"/\") {\n      path = \"/\".concat(path);\n    }\n\n    if (path[path.length - 1] !== \"/\") {\n      path = \"\".concat(path, \"/\");\n    }\n\n    return encodeURI(\"/me/drive/root:\".concat(path).concat(fileName, \":/createUploadSession\"));\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * Creates a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {Blob | Buffer | File} file - File represented as Blob, Buffer or File\r\n   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\r\n   * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\r\n   */\n\n\n  static create(client, file, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const name = options.fileName;\n      let content;\n      let size;\n\n      switch (file.constructor.name) {\n        case \"Blob\":\n          content = new File([file], name);\n          size = content.size;\n          break;\n\n        case \"File\":\n          content = file;\n          size = content.size;\n          break;\n\n        case \"Buffer\":\n          const b = file;\n          size = b.byteLength - b.byteOffset;\n          content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n          break;\n      }\n\n      try {\n        const requestUrl = OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\n        const session = yield OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, options.fileName);\n        const rangeSize = getValidRangeSize(options.rangeSize);\n        const fileObj = {\n          name,\n          content,\n          size\n        };\n        return new OneDriveLargeFileUploadTask(client, fileObj, session, {\n          rangeSize\n        });\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * Makes request to the server to create an upload session\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {string} requestUrl - The URL to create the upload session\r\n   * @param {string} fileName - The name of a file to upload, (with extension)\r\n   * @returns The promise that resolves to LargeFileUploadSession\r\n   */\n\n\n  static createUploadSession(client, requestUrl, fileName) {\n    const _super = Object.create(null, {\n      createUploadSession: {\n        get: () => super.createUploadSession\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = {\n        item: {\n          \"@microsoft.graph.conflictBehavior\": \"rename\",\n          name: fileName\n        }\n      };\n\n      try {\n        return _super.createUploadSession.call(this, client, requestUrl, payload);\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * Commits upload session to end uploading\r\n   * @param {string} requestUrl - The URL to commit the upload session\r\n   * @returns The promise resolves to committed response\r\n   */\n\n\n  commit(requestUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const payload = {\n          name: this.file.name,\n          \"@microsoft.graph.conflictBehavior\": \"rename\",\n          \"@microsoft.graph.sourceUrl\": this.uploadSession.url\n        };\n        return yield this.client.api(requestUrl).put(payload);\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * Default path for the file being uploaded\r\n */\n\nOneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = \"/\";","map":null,"metadata":{},"sourceType":"module"}