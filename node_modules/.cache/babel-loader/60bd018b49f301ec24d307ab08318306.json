{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport { MiddlewareControl } from \"../MiddlewareControl\";\n/**\r\n * @enum\r\n * @property {number} NONE - The hexadecimal flag value for nothing enabled\r\n * @property {number} REDIRECT_HANDLER_ENABLED - The hexadecimal flag value for redirect handler enabled\r\n * @property {number} RETRY_HANDLER_ENABLED - The hexadecimal flag value for retry handler enabled\r\n * @property {number} AUTHENTICATION_HANDLER_ENABLED - The hexadecimal flag value for the authentication handler enabled\r\n */\n\nexport var FeatureUsageFlag;\n\n(function (FeatureUsageFlag) {\n  FeatureUsageFlag[FeatureUsageFlag[\"NONE\"] = 0] = \"NONE\";\n  FeatureUsageFlag[FeatureUsageFlag[\"REDIRECT_HANDLER_ENABLED\"] = 1] = \"REDIRECT_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"RETRY_HANDLER_ENABLED\"] = 2] = \"RETRY_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"AUTHENTICATION_HANDLER_ENABLED\"] = 4] = \"AUTHENTICATION_HANDLER_ENABLED\";\n})(FeatureUsageFlag || (FeatureUsageFlag = {}));\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for TelemetryHandlerOptions\r\n */\n\n\nexport class TelemetryHandlerOptions {\n  constructor() {\n    /**\r\n     * @private\r\n     * A member to hold the OR of feature usage flags\r\n     */\n    this.featureUsage = FeatureUsageFlag.NONE;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To update the feature usage in the context object\r\n   * @param {Context} context - The request context object containing middleware options\r\n   * @param {FeatureUsageFlag} flag - The flag value\r\n   * @returns nothing\r\n   */\n\n\n  static updateFeatureUsageFlag(context, flag) {\n    let options;\n\n    if (context.middlewareControl instanceof MiddlewareControl) {\n      options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions.name);\n    } else {\n      context.middlewareControl = new MiddlewareControl();\n    }\n\n    if (typeof options === \"undefined\") {\n      options = new TelemetryHandlerOptions();\n      context.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions.name, options);\n    }\n\n    options.setFeatureUsage(flag);\n  }\n  /**\r\n   * @private\r\n   * To set the feature usage flag\r\n   * @param {FeatureUsageFlag} flag - The flag value\r\n   * @returns nothing\r\n   */\n\n\n  setFeatureUsage(flag) {\n    /* tslint:disable: no-bitwise */\n    this.featureUsage = this.featureUsage | flag;\n    /* tslint:enable: no-bitwise */\n  }\n  /**\r\n   * @public\r\n   * To get the feature usage\r\n   * @returns A feature usage flag as hexadecimal string\r\n   */\n\n\n  getFeatureUsage() {\n    return this.featureUsage.toString(16);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}