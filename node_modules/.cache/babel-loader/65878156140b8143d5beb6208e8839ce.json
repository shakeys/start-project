{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /*async: */\n      true);\n\n      if (enableCaching) {// TODO: (shivb) ensure that this can be cached\n        // xhr.setRequestHeader(\"Cache-Control\", \"Public\");\n      }\n\n      xhr.onload = function (ev) {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n        } catch (e) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        resolve(jsonResponse);\n      };\n\n      xhr.onerror = function (ev) {\n        reject(xhr.status);\n      };\n\n      if (method === \"GET\") {\n        xhr.send();\n      } else {\n        throw \"not implemented\";\n      }\n    });\n  };\n\n  XhrClient.prototype.handleError = function (responseText) {\n    var jsonResponse;\n\n    try {\n      jsonResponse = JSON.parse(responseText);\n\n      if (jsonResponse.error) {\n        return jsonResponse.error;\n      } else {\n        throw responseText;\n      }\n    } catch (e) {\n      return responseText;\n    }\n  };\n\n  return XhrClient;\n}();\n\nexport { XhrClient };","map":null,"metadata":{},"sourceType":"module"}