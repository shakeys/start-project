{"ast":null,"code":"\"use strict\"; //\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar Interfaces_1 = require(\"./Interfaces\");\n\nexports.AzureAD = function (props) {\n  var authenticatedFunction = props.authenticatedFunction,\n      unauthenticatedFunction = props.unauthenticatedFunction,\n      provider = props.provider,\n      forceLogin = props.forceLogin,\n      accountInfoCallback = props.accountInfoCallback;\n\n  var _a = react_1.useState(provider.getAccountInfo()),\n      accountInfo = _a[0],\n      _setAccountInfo = _a[1];\n\n  var _b = react_1.useState(provider.authenticationState),\n      authenticationState = _b[0],\n      _setAuthenticationState = _b[1];\n\n  var _c = react_1.useState(provider.getError()),\n      error = _c[0],\n      _setError = _c[1]; // On component mounted\n\n\n  react_1.useEffect(function () {\n    provider.registerAuthenticationStateHandler(setAuthenticationState);\n    provider.registerAcountInfoHandler(onAccountInfoChanged);\n    provider.registerErrorHandler(setError);\n\n    if (props.reduxStore) {\n      provider.registerReduxStore(props.reduxStore);\n    }\n\n    if (authenticationState === Interfaces_1.AuthenticationState.Unauthenticated && forceLogin) {\n      login();\n    } // Cleanup on unmount\n\n\n    return function () {\n      provider.unregisterAuthenticationStateHandler(setAuthenticationState);\n      provider.unregisterAccountInfoHandler(onAccountInfoChanged);\n    };\n  }, []);\n  var login = react_1.useCallback(function () {\n    provider.login();\n  }, [provider]);\n  var logout = react_1.useCallback(function () {\n    if (authenticationState !== Interfaces_1.AuthenticationState.Authenticated) {\n      return;\n    }\n\n    provider.logout();\n  }, [authenticationState, provider]);\n  var setAuthenticationState = react_1.useCallback(function (newState) {\n    if (newState !== authenticationState) {\n      _setAuthenticationState(newState);\n\n      if (newState === Interfaces_1.AuthenticationState.Unauthenticated && forceLogin) {\n        login();\n      }\n    }\n  }, [authenticationState, forceLogin]);\n  var setError = react_1.useCallback(function (newError) {\n    if (newError !== error) {\n      _setError(newError);\n    }\n  }, [error]);\n  var onAccountInfoChanged = react_1.useCallback(function (newAccountInfo) {\n    _setAccountInfo(newAccountInfo);\n\n    if (accountInfoCallback) {\n      // tslint:disable-next-line: no-console\n      console.warn('Warning! The accountInfoCallback callback has been deprecated and will be removed in a future release.');\n      accountInfoCallback(newAccountInfo);\n    }\n  }, [accountInfoCallback]); // The authentication data to be passed to the children() if it's a function\n\n  var childrenFunctionProps = react_1.useMemo(function () {\n    return {\n      accountInfo: accountInfo,\n      authenticationState: authenticationState,\n      error: error,\n      login: login,\n      logout: logout\n    };\n  }, [accountInfo, authenticationState, error, login, logout]);\n\n  function getChildrenOrFunction(children, childrenProps) {\n    if (children) {\n      // tslint:disable-next-line: triple-equals\n      if (typeof children == 'function' || false) {\n        return children(childrenProps);\n      } else {\n        return children;\n      }\n    } else {\n      return null;\n    }\n  } // Render logic\n\n\n  switch (authenticationState) {\n    case Interfaces_1.AuthenticationState.Authenticated:\n      if (authenticatedFunction) {\n        var authFunctionResult = authenticatedFunction(logout); // tslint:disable-next-line: no-console\n\n        console.warn('Warning! The authenticatedFunction callback has been deprecated and will be removed in a future release.');\n\n        if (authFunctionResult) {\n          return authFunctionResult;\n        }\n      } // If there is no authenticatedFunction, or it returned null, render the children\n\n\n      return getChildrenOrFunction(props.children, childrenFunctionProps);\n\n    case Interfaces_1.AuthenticationState.Unauthenticated:\n      if (unauthenticatedFunction) {\n        // tslint:disable-next-line: no-console\n        console.warn('Warning! The unauthenticatedFunction callback has been deprecated and will be removed in a future release.');\n        return unauthenticatedFunction(login) || null;\n      } // Only return the children if it's a function to pass the current state to\n      //  Otherwise the content should be restricted until authenticated\n\n\n      var functionOrChildren = getChildrenOrFunction(props.children, childrenFunctionProps);\n      return functionOrChildren === props.children ? null : functionOrChildren;\n\n    default:\n      return null;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}