{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for HTTPMessageHandler\r\n */\n\n\nexport class HTTPMessageHandler {\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The request context object\r\n   * @returns A promise that resolves to nothing\r\n   */\n  execute(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        context.response = yield fetch(context.request, context.options);\n        return;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}