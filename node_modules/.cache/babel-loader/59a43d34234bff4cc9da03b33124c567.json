{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport { EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\n\nvar TelemetryEvent =\n/** @class */\nfunction () {\n  function TelemetryEvent(eventName, correlationId) {\n    var _a;\n\n    this.startTimestamp = Date.now();\n    this.eventId = CryptoUtils.createNewGuid();\n    this.event = (_a = {}, _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName, _a[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp, _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1, _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId, _a);\n  }\n\n  TelemetryEvent.prototype.setElapsedTime = function (time) {\n    this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\n  };\n\n  TelemetryEvent.prototype.stop = function () {\n    // Set duration of event\n    this.setElapsedTime(+Date.now() - +this.startTimestamp);\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\n    get: function () {\n      return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\n    },\n    set: function (value) {\n      this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\n    get: function () {\n      return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TelemetryEvent.prototype.get = function () {\n    return tslib_1.__assign({}, this.event, {\n      eventId: this.eventId\n    });\n  };\n\n  return TelemetryEvent;\n}();\n\nexport default TelemetryEvent;","map":null,"metadata":{},"sourceType":"module"}