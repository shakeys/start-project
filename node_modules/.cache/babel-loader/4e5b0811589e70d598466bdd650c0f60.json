{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport { Authority, AuthorityType } from \"./Authority\";\nimport { XhrClient } from \"./XHRClient\";\nimport { AADTrustedHostList } from \"./utils/Constants\";\n/**\r\n * @hidden\r\n */\n\nvar AadAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AadAuthority, _super);\n\n  function AadAuthority(authority, validateAuthority) {\n    return _super.call(this, authority, validateAuthority) || this;\n  }\n\n  Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n    get: function () {\n      return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return AuthorityType.Aad;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a promise which resolves to the OIDC endpoint\r\n   * Only responds with the endpoint\r\n   */\n\n  AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    var _this = this;\n\n    var resultPromise = new Promise(function (resolve, reject) {\n      return resolve(_this.DefaultOpenIdConfigurationEndpoint);\n    });\n\n    if (!this.IsValidationEnabled) {\n      return resultPromise;\n    }\n\n    var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;\n\n    if (this.IsInTrustedHostList(host)) {\n      return resultPromise;\n    }\n\n    var client = new XhrClient();\n    return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true).then(function (response) {\n      return response.tenant_discovery_endpoint;\n    });\n  };\n  /**\r\n   * Checks to see if the host is in a list of trusted hosts\r\n   * @param {string} The host to look up\r\n   */\n\n\n  AadAuthority.prototype.IsInTrustedHostList = function (host) {\n    return AADTrustedHostList[host.toLowerCase()];\n  };\n\n  AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n  return AadAuthority;\n}(Authority);\n\nexport { AadAuthority };","map":null,"metadata":{},"sourceType":"module"}